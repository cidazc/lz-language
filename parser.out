Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMMENT

Grammar

Rule 0     S' -> start
Rule 1     start -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> var_dec
Rule 5     statement -> if_statement
Rule 6     statement -> ifel_statement
Rule 7     statement -> wh_statement
Rule 8     statement -> ip_statement
Rule 9     statement -> pr_statement
Rule 10    statement -> assign_expr
Rule 11    statement -> arr_push
Rule 12    statement -> arr_print
Rule 13    statement -> new_line
Rule 14    assign_expr -> NAME ASSIGN expression
Rule 15    var_dec -> var_dec_st
Rule 16    var_dec -> var_dec_in
Rule 17    var_dec -> var_dec_fl
Rule 18    var_dec -> arr_dec
Rule 19    var_dec_st -> NAME ASSIGN STRINGDEC STRING
Rule 20    var_dec_in -> NAME ASSIGN INTDEC expression
Rule 21    var_dec_fl -> NAME ASSIGN FLOATDEC expression
Rule 22    arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET
Rule 23    arr_dec -> NAME ASSIGN LBRACKET RBRACKET
Rule 24    arr_param -> arr_param COMMA arr_thing
Rule 25    arr_param -> arr_thing
Rule 26    arr_thing -> STRING
Rule 27    arr_thing -> expression
Rule 28    ip_statement -> INPUTDEC NAME
Rule 29    pr_statement -> PRINT outputblock ENDPRINT
Rule 30    new_line -> NEWLINE
Rule 31    outputblock -> outputblock expression
Rule 32    outputblock -> outputblock STRING
Rule 33    outputblock -> outputblock comparison
Rule 34    outputblock -> outputblock LZDIGIT
Rule 35    outputblock -> expression
Rule 36    outputblock -> STRING
Rule 37    outputblock -> comparison
Rule 38    outputblock -> LZDIGIT
Rule 39    if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF
Rule 40    ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
Rule 41    wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE
Rule 42    comparison -> arr_empty
Rule 43    comparison -> LBRACKET comparison RBRACKET
Rule 44    comparison -> expression EQUALS expression
Rule 45    comparison -> expression NOTEQ expression
Rule 46    comparison -> expression GREATER expression
Rule 47    comparison -> expression LESS expression
Rule 48    comparison -> expression GREATEREQ expression
Rule 49    comparison -> expression LESSEQ expression
Rule 50    comparison -> comparison AND comparison
Rule 51    comparison -> comparison OR comparison
Rule 52    comparison -> NOT comparison
Rule 53    expression -> expression PLUS expression
Rule 54    expression -> expression MINUS expression
Rule 55    expression -> expression TIMES expression
Rule 56    expression -> expression FDIVIDE expression
Rule 57    expression -> expression DIVIDE expression
Rule 58    expression -> expression MODULO expression
Rule 59    expression -> expression POWER expression
Rule 60    expression -> LPAREN expression RPAREN
Rule 61    expression -> MINUS expression
Rule 62    expression -> INT
Rule 63    expression -> FLOAT
Rule 64    expression -> LZWORD
Rule 65    expression -> NAME
Rule 66    expression -> NAME LBRACKET expression RBRACKET
Rule 67    arr_push -> PUSH NAME expression ENDPUSH
Rule 68    arr_print -> PRINTARRAY NAME
Rule 69    expression -> POP NAME
Rule 70    expression -> TOP NAME
Rule 71    arr_empty -> ISEMPTY NAME
Rule 72    expression -> ARRLEN NAME
Rule 73    statement -> NAME LBRACKET expression RBRACKET ASSIGN expression

Terminals, with rules where they appear

AND                  : 50
ARRLEN               : 72
ASSIGN               : 14 19 20 21 22 23 73
COMMA                : 24
COMMENT              : 
DIVIDE               : 57
ELSE                 : 40
ENDELSE              : 40
ENDIF                : 39 40
ENDPRINT             : 29
ENDPUSH              : 67
ENDWHILE             : 41
EQUALS               : 44
FDIVIDE              : 56
FLOAT                : 63
FLOATDEC             : 21
GREATER              : 46
GREATEREQ            : 48
IF                   : 39 40
INPUTDEC             : 28
INT                  : 62
INTDEC               : 20
ISEMPTY              : 71
LBRACKET             : 22 23 39 40 41 43 66 73
LESS                 : 47
LESSEQ               : 49
LPAREN               : 60
LZDIGIT              : 34 38
LZWORD               : 64
MINUS                : 54 61
MODULO               : 58
NAME                 : 14 19 20 21 22 23 28 65 66 67 68 69 70 71 72 73
NEWLINE              : 30
NOT                  : 52
NOTEQ                : 45
OR                   : 51
PLUS                 : 53
POP                  : 69
POWER                : 59
PRINT                : 29
PRINTARRAY           : 68
PUSH                 : 67
RBRACKET             : 22 23 39 40 41 43 66 73
RPAREN               : 60
STRING               : 19 26 32 36
STRINGDEC            : 19
TIMES                : 55
TOP                  : 70
WHILE                : 41
error                : 

Nonterminals, with rules where they appear

arr_dec              : 18
arr_empty            : 42
arr_param            : 22 24
arr_print            : 12
arr_push             : 11
arr_thing            : 24 25
assign_expr          : 10
comparison           : 33 37 39 40 41 43 50 50 51 51 52
expression           : 14 20 21 27 31 35 44 44 45 45 46 46 47 47 48 48 49 49 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 61 66 67 73 73
if_statement         : 5
ifel_statement       : 6
ip_statement         : 8
new_line             : 13
outputblock          : 29 31 32 33 34
pr_statement         : 9
start                : 0
statement            : 2 3
statements           : 1 2 39 40 40 41
var_dec              : 4
var_dec_fl           : 17
var_dec_in           : 16
var_dec_st           : 15
wh_statement         : 7

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    statements                     shift and go to state 1
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    start                          shift and go to state 13
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 15
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 1

    (1) start -> statements .
    (2) statements -> statements . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    $end            reduce using rule 1 (start -> statements .)
    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 26
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 2

    (11) statement -> arr_push .

    ENDIF           reduce using rule 11 (statement -> arr_push .)
    NAME            reduce using rule 11 (statement -> arr_push .)
    IF              reduce using rule 11 (statement -> arr_push .)
    WHILE           reduce using rule 11 (statement -> arr_push .)
    INPUTDEC        reduce using rule 11 (statement -> arr_push .)
    PRINT           reduce using rule 11 (statement -> arr_push .)
    PUSH            reduce using rule 11 (statement -> arr_push .)
    PRINTARRAY      reduce using rule 11 (statement -> arr_push .)
    NEWLINE         reduce using rule 11 (statement -> arr_push .)
    $end            reduce using rule 11 (statement -> arr_push .)
    ENDELSE         reduce using rule 11 (statement -> arr_push .)
    ENDWHILE        reduce using rule 11 (statement -> arr_push .)


state 3

    (7) statement -> wh_statement .

    ENDIF           reduce using rule 7 (statement -> wh_statement .)
    NAME            reduce using rule 7 (statement -> wh_statement .)
    IF              reduce using rule 7 (statement -> wh_statement .)
    WHILE           reduce using rule 7 (statement -> wh_statement .)
    INPUTDEC        reduce using rule 7 (statement -> wh_statement .)
    PRINT           reduce using rule 7 (statement -> wh_statement .)
    PUSH            reduce using rule 7 (statement -> wh_statement .)
    PRINTARRAY      reduce using rule 7 (statement -> wh_statement .)
    NEWLINE         reduce using rule 7 (statement -> wh_statement .)
    $end            reduce using rule 7 (statement -> wh_statement .)
    ENDELSE         reduce using rule 7 (statement -> wh_statement .)
    ENDWHILE        reduce using rule 7 (statement -> wh_statement .)


state 4

    (29) pr_statement -> PRINT . outputblock ENDPRINT
    (31) outputblock -> . outputblock expression
    (32) outputblock -> . outputblock STRING
    (33) outputblock -> . outputblock comparison
    (34) outputblock -> . outputblock LZDIGIT
    (35) outputblock -> . expression
    (36) outputblock -> . STRING
    (37) outputblock -> . comparison
    (38) outputblock -> . LZDIGIT
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME

    STRING          shift and go to state 31
    LZDIGIT         shift and go to state 33
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36
    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35

    comparison                     shift and go to state 39
    expression                     shift and go to state 44
    outputblock                    shift and go to state 32
    arr_empty                      shift and go to state 28

state 5

    (41) wh_statement -> WHILE . LBRACKET comparison RBRACKET statements ENDWHILE

    LBRACKET        shift and go to state 45


state 6

    (28) ip_statement -> INPUTDEC . NAME

    NAME            shift and go to state 46


state 7

    (12) statement -> arr_print .

    ENDIF           reduce using rule 12 (statement -> arr_print .)
    NAME            reduce using rule 12 (statement -> arr_print .)
    IF              reduce using rule 12 (statement -> arr_print .)
    WHILE           reduce using rule 12 (statement -> arr_print .)
    INPUTDEC        reduce using rule 12 (statement -> arr_print .)
    PRINT           reduce using rule 12 (statement -> arr_print .)
    PUSH            reduce using rule 12 (statement -> arr_print .)
    PRINTARRAY      reduce using rule 12 (statement -> arr_print .)
    NEWLINE         reduce using rule 12 (statement -> arr_print .)
    $end            reduce using rule 12 (statement -> arr_print .)
    ENDELSE         reduce using rule 12 (statement -> arr_print .)
    ENDWHILE        reduce using rule 12 (statement -> arr_print .)


state 8

    (15) var_dec -> var_dec_st .

    ENDELSE         reduce using rule 15 (var_dec -> var_dec_st .)
    NAME            reduce using rule 15 (var_dec -> var_dec_st .)
    IF              reduce using rule 15 (var_dec -> var_dec_st .)
    WHILE           reduce using rule 15 (var_dec -> var_dec_st .)
    INPUTDEC        reduce using rule 15 (var_dec -> var_dec_st .)
    PRINT           reduce using rule 15 (var_dec -> var_dec_st .)
    PUSH            reduce using rule 15 (var_dec -> var_dec_st .)
    PRINTARRAY      reduce using rule 15 (var_dec -> var_dec_st .)
    NEWLINE         reduce using rule 15 (var_dec -> var_dec_st .)
    ENDIF           reduce using rule 15 (var_dec -> var_dec_st .)
    $end            reduce using rule 15 (var_dec -> var_dec_st .)
    ENDWHILE        reduce using rule 15 (var_dec -> var_dec_st .)


state 9

    (8) statement -> ip_statement .

    ENDIF           reduce using rule 8 (statement -> ip_statement .)
    NAME            reduce using rule 8 (statement -> ip_statement .)
    IF              reduce using rule 8 (statement -> ip_statement .)
    WHILE           reduce using rule 8 (statement -> ip_statement .)
    INPUTDEC        reduce using rule 8 (statement -> ip_statement .)
    PRINT           reduce using rule 8 (statement -> ip_statement .)
    PUSH            reduce using rule 8 (statement -> ip_statement .)
    PRINTARRAY      reduce using rule 8 (statement -> ip_statement .)
    NEWLINE         reduce using rule 8 (statement -> ip_statement .)
    $end            reduce using rule 8 (statement -> ip_statement .)
    ENDELSE         reduce using rule 8 (statement -> ip_statement .)
    ENDWHILE        reduce using rule 8 (statement -> ip_statement .)


state 10

    (4) statement -> var_dec .

    ENDIF           reduce using rule 4 (statement -> var_dec .)
    NAME            reduce using rule 4 (statement -> var_dec .)
    IF              reduce using rule 4 (statement -> var_dec .)
    WHILE           reduce using rule 4 (statement -> var_dec .)
    INPUTDEC        reduce using rule 4 (statement -> var_dec .)
    PRINT           reduce using rule 4 (statement -> var_dec .)
    PUSH            reduce using rule 4 (statement -> var_dec .)
    PRINTARRAY      reduce using rule 4 (statement -> var_dec .)
    NEWLINE         reduce using rule 4 (statement -> var_dec .)
    $end            reduce using rule 4 (statement -> var_dec .)
    ENDELSE         reduce using rule 4 (statement -> var_dec .)
    ENDWHILE        reduce using rule 4 (statement -> var_dec .)


state 11

    (30) new_line -> NEWLINE .

    NAME            reduce using rule 30 (new_line -> NEWLINE .)
    IF              reduce using rule 30 (new_line -> NEWLINE .)
    WHILE           reduce using rule 30 (new_line -> NEWLINE .)
    INPUTDEC        reduce using rule 30 (new_line -> NEWLINE .)
    PRINT           reduce using rule 30 (new_line -> NEWLINE .)
    PUSH            reduce using rule 30 (new_line -> NEWLINE .)
    PRINTARRAY      reduce using rule 30 (new_line -> NEWLINE .)
    NEWLINE         reduce using rule 30 (new_line -> NEWLINE .)
    $end            reduce using rule 30 (new_line -> NEWLINE .)
    ENDELSE         reduce using rule 30 (new_line -> NEWLINE .)
    ENDWHILE        reduce using rule 30 (new_line -> NEWLINE .)
    ENDIF           reduce using rule 30 (new_line -> NEWLINE .)


state 12

    (17) var_dec -> var_dec_fl .

    ENDELSE         reduce using rule 17 (var_dec -> var_dec_fl .)
    NAME            reduce using rule 17 (var_dec -> var_dec_fl .)
    IF              reduce using rule 17 (var_dec -> var_dec_fl .)
    WHILE           reduce using rule 17 (var_dec -> var_dec_fl .)
    INPUTDEC        reduce using rule 17 (var_dec -> var_dec_fl .)
    PRINT           reduce using rule 17 (var_dec -> var_dec_fl .)
    PUSH            reduce using rule 17 (var_dec -> var_dec_fl .)
    PRINTARRAY      reduce using rule 17 (var_dec -> var_dec_fl .)
    NEWLINE         reduce using rule 17 (var_dec -> var_dec_fl .)
    ENDIF           reduce using rule 17 (var_dec -> var_dec_fl .)
    $end            reduce using rule 17 (var_dec -> var_dec_fl .)
    ENDWHILE        reduce using rule 17 (var_dec -> var_dec_fl .)


state 13

    (0) S' -> start .



state 14

    (10) statement -> assign_expr .

    ENDIF           reduce using rule 10 (statement -> assign_expr .)
    NAME            reduce using rule 10 (statement -> assign_expr .)
    IF              reduce using rule 10 (statement -> assign_expr .)
    WHILE           reduce using rule 10 (statement -> assign_expr .)
    INPUTDEC        reduce using rule 10 (statement -> assign_expr .)
    PRINT           reduce using rule 10 (statement -> assign_expr .)
    PUSH            reduce using rule 10 (statement -> assign_expr .)
    PRINTARRAY      reduce using rule 10 (statement -> assign_expr .)
    NEWLINE         reduce using rule 10 (statement -> assign_expr .)
    $end            reduce using rule 10 (statement -> assign_expr .)
    ENDELSE         reduce using rule 10 (statement -> assign_expr .)
    ENDWHILE        reduce using rule 10 (statement -> assign_expr .)


state 15

    (3) statements -> statement .

    ENDWHILE        reduce using rule 3 (statements -> statement .)
    NAME            reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    INPUTDEC        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    PUSH            reduce using rule 3 (statements -> statement .)
    PRINTARRAY      reduce using rule 3 (statements -> statement .)
    NEWLINE         reduce using rule 3 (statements -> statement .)
    ENDIF           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    ENDELSE         reduce using rule 3 (statements -> statement .)


state 16

    (67) arr_push -> PUSH . NAME expression ENDPUSH

    NAME            shift and go to state 47


state 17

    (5) statement -> if_statement .

    ENDIF           reduce using rule 5 (statement -> if_statement .)
    NAME            reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    INPUTDEC        reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    PUSH            reduce using rule 5 (statement -> if_statement .)
    PRINTARRAY      reduce using rule 5 (statement -> if_statement .)
    NEWLINE         reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    ENDELSE         reduce using rule 5 (statement -> if_statement .)
    ENDWHILE        reduce using rule 5 (statement -> if_statement .)


state 18

    (6) statement -> ifel_statement .

    ENDIF           reduce using rule 6 (statement -> ifel_statement .)
    NAME            reduce using rule 6 (statement -> ifel_statement .)
    IF              reduce using rule 6 (statement -> ifel_statement .)
    WHILE           reduce using rule 6 (statement -> ifel_statement .)
    INPUTDEC        reduce using rule 6 (statement -> ifel_statement .)
    PRINT           reduce using rule 6 (statement -> ifel_statement .)
    PUSH            reduce using rule 6 (statement -> ifel_statement .)
    PRINTARRAY      reduce using rule 6 (statement -> ifel_statement .)
    NEWLINE         reduce using rule 6 (statement -> ifel_statement .)
    $end            reduce using rule 6 (statement -> ifel_statement .)
    ENDELSE         reduce using rule 6 (statement -> ifel_statement .)
    ENDWHILE        reduce using rule 6 (statement -> ifel_statement .)


state 19

    (9) statement -> pr_statement .

    ENDIF           reduce using rule 9 (statement -> pr_statement .)
    NAME            reduce using rule 9 (statement -> pr_statement .)
    IF              reduce using rule 9 (statement -> pr_statement .)
    WHILE           reduce using rule 9 (statement -> pr_statement .)
    INPUTDEC        reduce using rule 9 (statement -> pr_statement .)
    PRINT           reduce using rule 9 (statement -> pr_statement .)
    PUSH            reduce using rule 9 (statement -> pr_statement .)
    PRINTARRAY      reduce using rule 9 (statement -> pr_statement .)
    NEWLINE         reduce using rule 9 (statement -> pr_statement .)
    $end            reduce using rule 9 (statement -> pr_statement .)
    ENDELSE         reduce using rule 9 (statement -> pr_statement .)
    ENDWHILE        reduce using rule 9 (statement -> pr_statement .)


state 20

    (13) statement -> new_line .

    ENDIF           reduce using rule 13 (statement -> new_line .)
    NAME            reduce using rule 13 (statement -> new_line .)
    IF              reduce using rule 13 (statement -> new_line .)
    WHILE           reduce using rule 13 (statement -> new_line .)
    INPUTDEC        reduce using rule 13 (statement -> new_line .)
    PRINT           reduce using rule 13 (statement -> new_line .)
    PUSH            reduce using rule 13 (statement -> new_line .)
    PRINTARRAY      reduce using rule 13 (statement -> new_line .)
    NEWLINE         reduce using rule 13 (statement -> new_line .)
    $end            reduce using rule 13 (statement -> new_line .)
    ENDELSE         reduce using rule 13 (statement -> new_line .)
    ENDWHILE        reduce using rule 13 (statement -> new_line .)


state 21

    (39) if_statement -> IF . LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> IF . LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE

    LBRACKET        shift and go to state 48


state 22

    (73) statement -> NAME . LBRACKET expression RBRACKET ASSIGN expression
    (14) assign_expr -> NAME . ASSIGN expression
    (19) var_dec_st -> NAME . ASSIGN STRINGDEC STRING
    (20) var_dec_in -> NAME . ASSIGN INTDEC expression
    (21) var_dec_fl -> NAME . ASSIGN FLOATDEC expression
    (22) arr_dec -> NAME . ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> NAME . ASSIGN LBRACKET RBRACKET

    LBRACKET        shift and go to state 49
    ASSIGN          shift and go to state 50


state 23

    (16) var_dec -> var_dec_in .

    ENDELSE         reduce using rule 16 (var_dec -> var_dec_in .)
    NAME            reduce using rule 16 (var_dec -> var_dec_in .)
    IF              reduce using rule 16 (var_dec -> var_dec_in .)
    WHILE           reduce using rule 16 (var_dec -> var_dec_in .)
    INPUTDEC        reduce using rule 16 (var_dec -> var_dec_in .)
    PRINT           reduce using rule 16 (var_dec -> var_dec_in .)
    PUSH            reduce using rule 16 (var_dec -> var_dec_in .)
    PRINTARRAY      reduce using rule 16 (var_dec -> var_dec_in .)
    NEWLINE         reduce using rule 16 (var_dec -> var_dec_in .)
    ENDIF           reduce using rule 16 (var_dec -> var_dec_in .)
    $end            reduce using rule 16 (var_dec -> var_dec_in .)
    ENDWHILE        reduce using rule 16 (var_dec -> var_dec_in .)


state 24

    (68) arr_print -> PRINTARRAY . NAME

    NAME            shift and go to state 51


state 25

    (18) var_dec -> arr_dec .

    ENDELSE         reduce using rule 18 (var_dec -> arr_dec .)
    NAME            reduce using rule 18 (var_dec -> arr_dec .)
    IF              reduce using rule 18 (var_dec -> arr_dec .)
    WHILE           reduce using rule 18 (var_dec -> arr_dec .)
    INPUTDEC        reduce using rule 18 (var_dec -> arr_dec .)
    PRINT           reduce using rule 18 (var_dec -> arr_dec .)
    PUSH            reduce using rule 18 (var_dec -> arr_dec .)
    PRINTARRAY      reduce using rule 18 (var_dec -> arr_dec .)
    NEWLINE         reduce using rule 18 (var_dec -> arr_dec .)
    ENDIF           reduce using rule 18 (var_dec -> arr_dec .)
    $end            reduce using rule 18 (var_dec -> arr_dec .)
    ENDWHILE        reduce using rule 18 (var_dec -> arr_dec .)


state 26

    (2) statements -> statements statement .

    ENDWHILE        reduce using rule 2 (statements -> statements statement .)
    NAME            reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    INPUTDEC        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    PUSH            reduce using rule 2 (statements -> statements statement .)
    PRINTARRAY      reduce using rule 2 (statements -> statements statement .)
    NEWLINE         reduce using rule 2 (statements -> statements statement .)
    ENDIF           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    ENDELSE         reduce using rule 2 (statements -> statements statement .)


state 27

    (70) expression -> TOP . NAME

    NAME            shift and go to state 52


state 28

    (42) comparison -> arr_empty .

    RBRACKET        reduce using rule 42 (comparison -> arr_empty .)
    AND             reduce using rule 42 (comparison -> arr_empty .)
    OR              reduce using rule 42 (comparison -> arr_empty .)
    ENDPRINT        reduce using rule 42 (comparison -> arr_empty .)
    STRING          reduce using rule 42 (comparison -> arr_empty .)
    LZDIGIT         reduce using rule 42 (comparison -> arr_empty .)
    LPAREN          reduce using rule 42 (comparison -> arr_empty .)
    MINUS           reduce using rule 42 (comparison -> arr_empty .)
    INT             reduce using rule 42 (comparison -> arr_empty .)
    FLOAT           reduce using rule 42 (comparison -> arr_empty .)
    LZWORD          reduce using rule 42 (comparison -> arr_empty .)
    NAME            reduce using rule 42 (comparison -> arr_empty .)
    POP             reduce using rule 42 (comparison -> arr_empty .)
    TOP             reduce using rule 42 (comparison -> arr_empty .)
    ARRLEN          reduce using rule 42 (comparison -> arr_empty .)
    LBRACKET        reduce using rule 42 (comparison -> arr_empty .)
    NOT             reduce using rule 42 (comparison -> arr_empty .)
    ISEMPTY         reduce using rule 42 (comparison -> arr_empty .)


state 29

    (43) comparison -> LBRACKET . comparison RBRACKET
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    comparison                     shift and go to state 53
    expression                     shift and go to state 54
    arr_empty                      shift and go to state 28

state 30

    (61) expression -> MINUS . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 55

state 31

    (36) outputblock -> STRING .

    ENDPRINT        reduce using rule 36 (outputblock -> STRING .)
    STRING          reduce using rule 36 (outputblock -> STRING .)
    LZDIGIT         reduce using rule 36 (outputblock -> STRING .)
    LPAREN          reduce using rule 36 (outputblock -> STRING .)
    MINUS           reduce using rule 36 (outputblock -> STRING .)
    INT             reduce using rule 36 (outputblock -> STRING .)
    FLOAT           reduce using rule 36 (outputblock -> STRING .)
    LZWORD          reduce using rule 36 (outputblock -> STRING .)
    NAME            reduce using rule 36 (outputblock -> STRING .)
    POP             reduce using rule 36 (outputblock -> STRING .)
    TOP             reduce using rule 36 (outputblock -> STRING .)
    ARRLEN          reduce using rule 36 (outputblock -> STRING .)
    LBRACKET        reduce using rule 36 (outputblock -> STRING .)
    NOT             reduce using rule 36 (outputblock -> STRING .)
    ISEMPTY         reduce using rule 36 (outputblock -> STRING .)


state 32

    (29) pr_statement -> PRINT outputblock . ENDPRINT
    (31) outputblock -> outputblock . expression
    (32) outputblock -> outputblock . STRING
    (33) outputblock -> outputblock . comparison
    (34) outputblock -> outputblock . LZDIGIT
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME

    ENDPRINT        shift and go to state 58
    STRING          shift and go to state 56
    LZDIGIT         shift and go to state 57
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36
    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35

    comparison                     shift and go to state 59
    expression                     shift and go to state 60
    arr_empty                      shift and go to state 28

state 33

    (38) outputblock -> LZDIGIT .

    ENDPRINT        reduce using rule 38 (outputblock -> LZDIGIT .)
    STRING          reduce using rule 38 (outputblock -> LZDIGIT .)
    LZDIGIT         reduce using rule 38 (outputblock -> LZDIGIT .)
    LPAREN          reduce using rule 38 (outputblock -> LZDIGIT .)
    MINUS           reduce using rule 38 (outputblock -> LZDIGIT .)
    INT             reduce using rule 38 (outputblock -> LZDIGIT .)
    FLOAT           reduce using rule 38 (outputblock -> LZDIGIT .)
    LZWORD          reduce using rule 38 (outputblock -> LZDIGIT .)
    NAME            reduce using rule 38 (outputblock -> LZDIGIT .)
    POP             reduce using rule 38 (outputblock -> LZDIGIT .)
    TOP             reduce using rule 38 (outputblock -> LZDIGIT .)
    ARRLEN          reduce using rule 38 (outputblock -> LZDIGIT .)
    LBRACKET        reduce using rule 38 (outputblock -> LZDIGIT .)
    NOT             reduce using rule 38 (outputblock -> LZDIGIT .)
    ISEMPTY         reduce using rule 38 (outputblock -> LZDIGIT .)


state 34

    (69) expression -> POP . NAME

    NAME            shift and go to state 61


state 35

    (71) arr_empty -> ISEMPTY . NAME

    NAME            shift and go to state 62


state 36

    (72) expression -> ARRLEN . NAME

    NAME            shift and go to state 63


state 37

    (60) expression -> LPAREN . expression RPAREN
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 64

state 38

    (64) expression -> LZWORD .

    PLUS            reduce using rule 64 (expression -> LZWORD .)
    MINUS           reduce using rule 64 (expression -> LZWORD .)
    TIMES           reduce using rule 64 (expression -> LZWORD .)
    FDIVIDE         reduce using rule 64 (expression -> LZWORD .)
    DIVIDE          reduce using rule 64 (expression -> LZWORD .)
    MODULO          reduce using rule 64 (expression -> LZWORD .)
    POWER           reduce using rule 64 (expression -> LZWORD .)
    EQUALS          reduce using rule 64 (expression -> LZWORD .)
    NOTEQ           reduce using rule 64 (expression -> LZWORD .)
    GREATER         reduce using rule 64 (expression -> LZWORD .)
    LESS            reduce using rule 64 (expression -> LZWORD .)
    GREATEREQ       reduce using rule 64 (expression -> LZWORD .)
    LESSEQ          reduce using rule 64 (expression -> LZWORD .)
    ENDPRINT        reduce using rule 64 (expression -> LZWORD .)
    STRING          reduce using rule 64 (expression -> LZWORD .)
    LZDIGIT         reduce using rule 64 (expression -> LZWORD .)
    LPAREN          reduce using rule 64 (expression -> LZWORD .)
    INT             reduce using rule 64 (expression -> LZWORD .)
    FLOAT           reduce using rule 64 (expression -> LZWORD .)
    LZWORD          reduce using rule 64 (expression -> LZWORD .)
    NAME            reduce using rule 64 (expression -> LZWORD .)
    POP             reduce using rule 64 (expression -> LZWORD .)
    TOP             reduce using rule 64 (expression -> LZWORD .)
    ARRLEN          reduce using rule 64 (expression -> LZWORD .)
    LBRACKET        reduce using rule 64 (expression -> LZWORD .)
    NOT             reduce using rule 64 (expression -> LZWORD .)
    ISEMPTY         reduce using rule 64 (expression -> LZWORD .)
    RPAREN          reduce using rule 64 (expression -> LZWORD .)
    ENDPUSH         reduce using rule 64 (expression -> LZWORD .)
    RBRACKET        reduce using rule 64 (expression -> LZWORD .)
    IF              reduce using rule 64 (expression -> LZWORD .)
    WHILE           reduce using rule 64 (expression -> LZWORD .)
    INPUTDEC        reduce using rule 64 (expression -> LZWORD .)
    PRINT           reduce using rule 64 (expression -> LZWORD .)
    PUSH            reduce using rule 64 (expression -> LZWORD .)
    PRINTARRAY      reduce using rule 64 (expression -> LZWORD .)
    NEWLINE         reduce using rule 64 (expression -> LZWORD .)
    $end            reduce using rule 64 (expression -> LZWORD .)
    ENDWHILE        reduce using rule 64 (expression -> LZWORD .)
    ENDIF           reduce using rule 64 (expression -> LZWORD .)
    ENDELSE         reduce using rule 64 (expression -> LZWORD .)
    AND             reduce using rule 64 (expression -> LZWORD .)
    OR              reduce using rule 64 (expression -> LZWORD .)
    COMMA           reduce using rule 64 (expression -> LZWORD .)


state 39

    (37) outputblock -> comparison .
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

    ENDPRINT        reduce using rule 37 (outputblock -> comparison .)
    STRING          reduce using rule 37 (outputblock -> comparison .)
    LZDIGIT         reduce using rule 37 (outputblock -> comparison .)
    LPAREN          reduce using rule 37 (outputblock -> comparison .)
    MINUS           reduce using rule 37 (outputblock -> comparison .)
    INT             reduce using rule 37 (outputblock -> comparison .)
    FLOAT           reduce using rule 37 (outputblock -> comparison .)
    LZWORD          reduce using rule 37 (outputblock -> comparison .)
    NAME            reduce using rule 37 (outputblock -> comparison .)
    POP             reduce using rule 37 (outputblock -> comparison .)
    TOP             reduce using rule 37 (outputblock -> comparison .)
    ARRLEN          reduce using rule 37 (outputblock -> comparison .)
    LBRACKET        reduce using rule 37 (outputblock -> comparison .)
    NOT             reduce using rule 37 (outputblock -> comparison .)
    ISEMPTY         reduce using rule 37 (outputblock -> comparison .)
    AND             shift and go to state 65
    OR              shift and go to state 66


state 40

    (65) expression -> NAME .
    (66) expression -> NAME . LBRACKET expression RBRACKET

  ! shift/reduce conflict for LBRACKET resolved as shift
    PLUS            reduce using rule 65 (expression -> NAME .)
    MINUS           reduce using rule 65 (expression -> NAME .)
    TIMES           reduce using rule 65 (expression -> NAME .)
    FDIVIDE         reduce using rule 65 (expression -> NAME .)
    DIVIDE          reduce using rule 65 (expression -> NAME .)
    MODULO          reduce using rule 65 (expression -> NAME .)
    POWER           reduce using rule 65 (expression -> NAME .)
    EQUALS          reduce using rule 65 (expression -> NAME .)
    NOTEQ           reduce using rule 65 (expression -> NAME .)
    GREATER         reduce using rule 65 (expression -> NAME .)
    LESS            reduce using rule 65 (expression -> NAME .)
    GREATEREQ       reduce using rule 65 (expression -> NAME .)
    LESSEQ          reduce using rule 65 (expression -> NAME .)
    ENDPRINT        reduce using rule 65 (expression -> NAME .)
    STRING          reduce using rule 65 (expression -> NAME .)
    LZDIGIT         reduce using rule 65 (expression -> NAME .)
    LPAREN          reduce using rule 65 (expression -> NAME .)
    INT             reduce using rule 65 (expression -> NAME .)
    FLOAT           reduce using rule 65 (expression -> NAME .)
    LZWORD          reduce using rule 65 (expression -> NAME .)
    NAME            reduce using rule 65 (expression -> NAME .)
    POP             reduce using rule 65 (expression -> NAME .)
    TOP             reduce using rule 65 (expression -> NAME .)
    ARRLEN          reduce using rule 65 (expression -> NAME .)
    NOT             reduce using rule 65 (expression -> NAME .)
    ISEMPTY         reduce using rule 65 (expression -> NAME .)
    RPAREN          reduce using rule 65 (expression -> NAME .)
    ENDPUSH         reduce using rule 65 (expression -> NAME .)
    RBRACKET        reduce using rule 65 (expression -> NAME .)
    IF              reduce using rule 65 (expression -> NAME .)
    WHILE           reduce using rule 65 (expression -> NAME .)
    INPUTDEC        reduce using rule 65 (expression -> NAME .)
    PRINT           reduce using rule 65 (expression -> NAME .)
    PUSH            reduce using rule 65 (expression -> NAME .)
    PRINTARRAY      reduce using rule 65 (expression -> NAME .)
    NEWLINE         reduce using rule 65 (expression -> NAME .)
    $end            reduce using rule 65 (expression -> NAME .)
    ENDWHILE        reduce using rule 65 (expression -> NAME .)
    ENDIF           reduce using rule 65 (expression -> NAME .)
    ENDELSE         reduce using rule 65 (expression -> NAME .)
    AND             reduce using rule 65 (expression -> NAME .)
    OR              reduce using rule 65 (expression -> NAME .)
    COMMA           reduce using rule 65 (expression -> NAME .)
    LBRACKET        shift and go to state 67

  ! LBRACKET        [ reduce using rule 65 (expression -> NAME .) ]


state 41

    (62) expression -> INT .

    PLUS            reduce using rule 62 (expression -> INT .)
    MINUS           reduce using rule 62 (expression -> INT .)
    TIMES           reduce using rule 62 (expression -> INT .)
    FDIVIDE         reduce using rule 62 (expression -> INT .)
    DIVIDE          reduce using rule 62 (expression -> INT .)
    MODULO          reduce using rule 62 (expression -> INT .)
    POWER           reduce using rule 62 (expression -> INT .)
    EQUALS          reduce using rule 62 (expression -> INT .)
    NOTEQ           reduce using rule 62 (expression -> INT .)
    GREATER         reduce using rule 62 (expression -> INT .)
    LESS            reduce using rule 62 (expression -> INT .)
    GREATEREQ       reduce using rule 62 (expression -> INT .)
    LESSEQ          reduce using rule 62 (expression -> INT .)
    ENDPRINT        reduce using rule 62 (expression -> INT .)
    STRING          reduce using rule 62 (expression -> INT .)
    LZDIGIT         reduce using rule 62 (expression -> INT .)
    LPAREN          reduce using rule 62 (expression -> INT .)
    INT             reduce using rule 62 (expression -> INT .)
    FLOAT           reduce using rule 62 (expression -> INT .)
    LZWORD          reduce using rule 62 (expression -> INT .)
    NAME            reduce using rule 62 (expression -> INT .)
    POP             reduce using rule 62 (expression -> INT .)
    TOP             reduce using rule 62 (expression -> INT .)
    ARRLEN          reduce using rule 62 (expression -> INT .)
    LBRACKET        reduce using rule 62 (expression -> INT .)
    NOT             reduce using rule 62 (expression -> INT .)
    ISEMPTY         reduce using rule 62 (expression -> INT .)
    RPAREN          reduce using rule 62 (expression -> INT .)
    ENDPUSH         reduce using rule 62 (expression -> INT .)
    RBRACKET        reduce using rule 62 (expression -> INT .)
    IF              reduce using rule 62 (expression -> INT .)
    WHILE           reduce using rule 62 (expression -> INT .)
    INPUTDEC        reduce using rule 62 (expression -> INT .)
    PRINT           reduce using rule 62 (expression -> INT .)
    PUSH            reduce using rule 62 (expression -> INT .)
    PRINTARRAY      reduce using rule 62 (expression -> INT .)
    NEWLINE         reduce using rule 62 (expression -> INT .)
    $end            reduce using rule 62 (expression -> INT .)
    ENDWHILE        reduce using rule 62 (expression -> INT .)
    ENDIF           reduce using rule 62 (expression -> INT .)
    ENDELSE         reduce using rule 62 (expression -> INT .)
    AND             reduce using rule 62 (expression -> INT .)
    OR              reduce using rule 62 (expression -> INT .)
    COMMA           reduce using rule 62 (expression -> INT .)


state 42

    (63) expression -> FLOAT .

    PLUS            reduce using rule 63 (expression -> FLOAT .)
    MINUS           reduce using rule 63 (expression -> FLOAT .)
    TIMES           reduce using rule 63 (expression -> FLOAT .)
    FDIVIDE         reduce using rule 63 (expression -> FLOAT .)
    DIVIDE          reduce using rule 63 (expression -> FLOAT .)
    MODULO          reduce using rule 63 (expression -> FLOAT .)
    POWER           reduce using rule 63 (expression -> FLOAT .)
    EQUALS          reduce using rule 63 (expression -> FLOAT .)
    NOTEQ           reduce using rule 63 (expression -> FLOAT .)
    GREATER         reduce using rule 63 (expression -> FLOAT .)
    LESS            reduce using rule 63 (expression -> FLOAT .)
    GREATEREQ       reduce using rule 63 (expression -> FLOAT .)
    LESSEQ          reduce using rule 63 (expression -> FLOAT .)
    ENDPRINT        reduce using rule 63 (expression -> FLOAT .)
    STRING          reduce using rule 63 (expression -> FLOAT .)
    LZDIGIT         reduce using rule 63 (expression -> FLOAT .)
    LPAREN          reduce using rule 63 (expression -> FLOAT .)
    INT             reduce using rule 63 (expression -> FLOAT .)
    FLOAT           reduce using rule 63 (expression -> FLOAT .)
    LZWORD          reduce using rule 63 (expression -> FLOAT .)
    NAME            reduce using rule 63 (expression -> FLOAT .)
    POP             reduce using rule 63 (expression -> FLOAT .)
    TOP             reduce using rule 63 (expression -> FLOAT .)
    ARRLEN          reduce using rule 63 (expression -> FLOAT .)
    LBRACKET        reduce using rule 63 (expression -> FLOAT .)
    NOT             reduce using rule 63 (expression -> FLOAT .)
    ISEMPTY         reduce using rule 63 (expression -> FLOAT .)
    RPAREN          reduce using rule 63 (expression -> FLOAT .)
    ENDPUSH         reduce using rule 63 (expression -> FLOAT .)
    RBRACKET        reduce using rule 63 (expression -> FLOAT .)
    IF              reduce using rule 63 (expression -> FLOAT .)
    WHILE           reduce using rule 63 (expression -> FLOAT .)
    INPUTDEC        reduce using rule 63 (expression -> FLOAT .)
    PRINT           reduce using rule 63 (expression -> FLOAT .)
    PUSH            reduce using rule 63 (expression -> FLOAT .)
    PRINTARRAY      reduce using rule 63 (expression -> FLOAT .)
    NEWLINE         reduce using rule 63 (expression -> FLOAT .)
    $end            reduce using rule 63 (expression -> FLOAT .)
    ENDWHILE        reduce using rule 63 (expression -> FLOAT .)
    ENDIF           reduce using rule 63 (expression -> FLOAT .)
    ENDELSE         reduce using rule 63 (expression -> FLOAT .)
    AND             reduce using rule 63 (expression -> FLOAT .)
    OR              reduce using rule 63 (expression -> FLOAT .)
    COMMA           reduce using rule 63 (expression -> FLOAT .)


state 43

    (52) comparison -> NOT . comparison
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    comparison                     shift and go to state 68
    expression                     shift and go to state 54
    arr_empty                      shift and go to state 28

state 44

    (35) outputblock -> expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression
    (44) comparison -> expression . EQUALS expression
    (45) comparison -> expression . NOTEQ expression
    (46) comparison -> expression . GREATER expression
    (47) comparison -> expression . LESS expression
    (48) comparison -> expression . GREATEREQ expression
    (49) comparison -> expression . LESSEQ expression

  ! shift/reduce conflict for MINUS resolved as shift
    ENDPRINT        reduce using rule 35 (outputblock -> expression .)
    STRING          reduce using rule 35 (outputblock -> expression .)
    LZDIGIT         reduce using rule 35 (outputblock -> expression .)
    LPAREN          reduce using rule 35 (outputblock -> expression .)
    INT             reduce using rule 35 (outputblock -> expression .)
    FLOAT           reduce using rule 35 (outputblock -> expression .)
    LZWORD          reduce using rule 35 (outputblock -> expression .)
    NAME            reduce using rule 35 (outputblock -> expression .)
    POP             reduce using rule 35 (outputblock -> expression .)
    TOP             reduce using rule 35 (outputblock -> expression .)
    ARRLEN          reduce using rule 35 (outputblock -> expression .)
    LBRACKET        reduce using rule 35 (outputblock -> expression .)
    NOT             reduce using rule 35 (outputblock -> expression .)
    ISEMPTY         reduce using rule 35 (outputblock -> expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72
    EQUALS          shift and go to state 75
    NOTEQ           shift and go to state 74
    GREATER         shift and go to state 81
    LESS            shift and go to state 73
    GREATEREQ       shift and go to state 77
    LESSEQ          shift and go to state 78

  ! MINUS           [ reduce using rule 35 (outputblock -> expression .) ]


state 45

    (41) wh_statement -> WHILE LBRACKET . comparison RBRACKET statements ENDWHILE
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    comparison                     shift and go to state 82
    expression                     shift and go to state 54
    arr_empty                      shift and go to state 28

state 46

    (28) ip_statement -> INPUTDEC NAME .

    NAME            reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    IF              reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    WHILE           reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    INPUTDEC        reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    PRINT           reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    PUSH            reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    PRINTARRAY      reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    NEWLINE         reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    $end            reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    ENDWHILE        reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    ENDIF           reduce using rule 28 (ip_statement -> INPUTDEC NAME .)
    ENDELSE         reduce using rule 28 (ip_statement -> INPUTDEC NAME .)


state 47

    (67) arr_push -> PUSH NAME . expression ENDPUSH
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 83

state 48

    (39) if_statement -> IF LBRACKET . comparison RBRACKET statements ENDIF
    (40) ifel_statement -> IF LBRACKET . comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    comparison                     shift and go to state 84
    expression                     shift and go to state 54
    arr_empty                      shift and go to state 28

state 49

    (73) statement -> NAME LBRACKET . expression RBRACKET ASSIGN expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 85

state 50

    (14) assign_expr -> NAME ASSIGN . expression
    (19) var_dec_st -> NAME ASSIGN . STRINGDEC STRING
    (20) var_dec_in -> NAME ASSIGN . INTDEC expression
    (21) var_dec_fl -> NAME ASSIGN . FLOATDEC expression
    (22) arr_dec -> NAME ASSIGN . LBRACKET arr_param RBRACKET
    (23) arr_dec -> NAME ASSIGN . LBRACKET RBRACKET
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    STRINGDEC       shift and go to state 89
    INTDEC          shift and go to state 87
    FLOATDEC        shift and go to state 88
    LBRACKET        shift and go to state 86
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 90

state 51

    (68) arr_print -> PRINTARRAY NAME .

    ENDWHILE        reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    NAME            reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    IF              reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    WHILE           reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    INPUTDEC        reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    PRINT           reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    PUSH            reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    PRINTARRAY      reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    NEWLINE         reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    ENDIF           reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    ENDELSE         reduce using rule 68 (arr_print -> PRINTARRAY NAME .)
    $end            reduce using rule 68 (arr_print -> PRINTARRAY NAME .)


state 52

    (70) expression -> TOP NAME .

    PLUS            reduce using rule 70 (expression -> TOP NAME .)
    MINUS           reduce using rule 70 (expression -> TOP NAME .)
    TIMES           reduce using rule 70 (expression -> TOP NAME .)
    FDIVIDE         reduce using rule 70 (expression -> TOP NAME .)
    DIVIDE          reduce using rule 70 (expression -> TOP NAME .)
    MODULO          reduce using rule 70 (expression -> TOP NAME .)
    POWER           reduce using rule 70 (expression -> TOP NAME .)
    EQUALS          reduce using rule 70 (expression -> TOP NAME .)
    NOTEQ           reduce using rule 70 (expression -> TOP NAME .)
    GREATER         reduce using rule 70 (expression -> TOP NAME .)
    LESS            reduce using rule 70 (expression -> TOP NAME .)
    GREATEREQ       reduce using rule 70 (expression -> TOP NAME .)
    LESSEQ          reduce using rule 70 (expression -> TOP NAME .)
    ENDPRINT        reduce using rule 70 (expression -> TOP NAME .)
    STRING          reduce using rule 70 (expression -> TOP NAME .)
    LZDIGIT         reduce using rule 70 (expression -> TOP NAME .)
    LPAREN          reduce using rule 70 (expression -> TOP NAME .)
    INT             reduce using rule 70 (expression -> TOP NAME .)
    FLOAT           reduce using rule 70 (expression -> TOP NAME .)
    LZWORD          reduce using rule 70 (expression -> TOP NAME .)
    NAME            reduce using rule 70 (expression -> TOP NAME .)
    POP             reduce using rule 70 (expression -> TOP NAME .)
    TOP             reduce using rule 70 (expression -> TOP NAME .)
    ARRLEN          reduce using rule 70 (expression -> TOP NAME .)
    LBRACKET        reduce using rule 70 (expression -> TOP NAME .)
    NOT             reduce using rule 70 (expression -> TOP NAME .)
    ISEMPTY         reduce using rule 70 (expression -> TOP NAME .)
    RPAREN          reduce using rule 70 (expression -> TOP NAME .)
    ENDPUSH         reduce using rule 70 (expression -> TOP NAME .)
    RBRACKET        reduce using rule 70 (expression -> TOP NAME .)
    IF              reduce using rule 70 (expression -> TOP NAME .)
    WHILE           reduce using rule 70 (expression -> TOP NAME .)
    INPUTDEC        reduce using rule 70 (expression -> TOP NAME .)
    PRINT           reduce using rule 70 (expression -> TOP NAME .)
    PUSH            reduce using rule 70 (expression -> TOP NAME .)
    PRINTARRAY      reduce using rule 70 (expression -> TOP NAME .)
    NEWLINE         reduce using rule 70 (expression -> TOP NAME .)
    $end            reduce using rule 70 (expression -> TOP NAME .)
    ENDWHILE        reduce using rule 70 (expression -> TOP NAME .)
    ENDIF           reduce using rule 70 (expression -> TOP NAME .)
    ENDELSE         reduce using rule 70 (expression -> TOP NAME .)
    AND             reduce using rule 70 (expression -> TOP NAME .)
    OR              reduce using rule 70 (expression -> TOP NAME .)
    COMMA           reduce using rule 70 (expression -> TOP NAME .)


state 53

    (43) comparison -> LBRACKET comparison . RBRACKET
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

    RBRACKET        shift and go to state 91
    AND             shift and go to state 65
    OR              shift and go to state 66


state 54

    (44) comparison -> expression . EQUALS expression
    (45) comparison -> expression . NOTEQ expression
    (46) comparison -> expression . GREATER expression
    (47) comparison -> expression . LESS expression
    (48) comparison -> expression . GREATEREQ expression
    (49) comparison -> expression . LESSEQ expression
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    EQUALS          shift and go to state 75
    NOTEQ           shift and go to state 74
    GREATER         shift and go to state 81
    LESS            shift and go to state 73
    GREATEREQ       shift and go to state 77
    LESSEQ          shift and go to state 78
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 55

    (61) expression -> MINUS expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 61 (expression -> MINUS expression .)
    MINUS           reduce using rule 61 (expression -> MINUS expression .)
    TIMES           reduce using rule 61 (expression -> MINUS expression .)
    FDIVIDE         reduce using rule 61 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 61 (expression -> MINUS expression .)
    MODULO          reduce using rule 61 (expression -> MINUS expression .)
    POWER           reduce using rule 61 (expression -> MINUS expression .)
    EQUALS          reduce using rule 61 (expression -> MINUS expression .)
    NOTEQ           reduce using rule 61 (expression -> MINUS expression .)
    GREATER         reduce using rule 61 (expression -> MINUS expression .)
    LESS            reduce using rule 61 (expression -> MINUS expression .)
    GREATEREQ       reduce using rule 61 (expression -> MINUS expression .)
    LESSEQ          reduce using rule 61 (expression -> MINUS expression .)
    ENDPRINT        reduce using rule 61 (expression -> MINUS expression .)
    STRING          reduce using rule 61 (expression -> MINUS expression .)
    LZDIGIT         reduce using rule 61 (expression -> MINUS expression .)
    LPAREN          reduce using rule 61 (expression -> MINUS expression .)
    INT             reduce using rule 61 (expression -> MINUS expression .)
    FLOAT           reduce using rule 61 (expression -> MINUS expression .)
    LZWORD          reduce using rule 61 (expression -> MINUS expression .)
    NAME            reduce using rule 61 (expression -> MINUS expression .)
    POP             reduce using rule 61 (expression -> MINUS expression .)
    TOP             reduce using rule 61 (expression -> MINUS expression .)
    ARRLEN          reduce using rule 61 (expression -> MINUS expression .)
    LBRACKET        reduce using rule 61 (expression -> MINUS expression .)
    NOT             reduce using rule 61 (expression -> MINUS expression .)
    ISEMPTY         reduce using rule 61 (expression -> MINUS expression .)
    RPAREN          reduce using rule 61 (expression -> MINUS expression .)
    ENDPUSH         reduce using rule 61 (expression -> MINUS expression .)
    RBRACKET        reduce using rule 61 (expression -> MINUS expression .)
    IF              reduce using rule 61 (expression -> MINUS expression .)
    WHILE           reduce using rule 61 (expression -> MINUS expression .)
    INPUTDEC        reduce using rule 61 (expression -> MINUS expression .)
    PRINT           reduce using rule 61 (expression -> MINUS expression .)
    PUSH            reduce using rule 61 (expression -> MINUS expression .)
    PRINTARRAY      reduce using rule 61 (expression -> MINUS expression .)
    NEWLINE         reduce using rule 61 (expression -> MINUS expression .)
    $end            reduce using rule 61 (expression -> MINUS expression .)
    ENDWHILE        reduce using rule 61 (expression -> MINUS expression .)
    ENDIF           reduce using rule 61 (expression -> MINUS expression .)
    ENDELSE         reduce using rule 61 (expression -> MINUS expression .)
    AND             reduce using rule 61 (expression -> MINUS expression .)
    OR              reduce using rule 61 (expression -> MINUS expression .)
    COMMA           reduce using rule 61 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 76 ]
  ! FDIVIDE         [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 70 ]
  ! POWER           [ shift and go to state 72 ]


state 56

    (32) outputblock -> outputblock STRING .

    ENDPRINT        reduce using rule 32 (outputblock -> outputblock STRING .)
    STRING          reduce using rule 32 (outputblock -> outputblock STRING .)
    LZDIGIT         reduce using rule 32 (outputblock -> outputblock STRING .)
    LPAREN          reduce using rule 32 (outputblock -> outputblock STRING .)
    MINUS           reduce using rule 32 (outputblock -> outputblock STRING .)
    INT             reduce using rule 32 (outputblock -> outputblock STRING .)
    FLOAT           reduce using rule 32 (outputblock -> outputblock STRING .)
    LZWORD          reduce using rule 32 (outputblock -> outputblock STRING .)
    NAME            reduce using rule 32 (outputblock -> outputblock STRING .)
    POP             reduce using rule 32 (outputblock -> outputblock STRING .)
    TOP             reduce using rule 32 (outputblock -> outputblock STRING .)
    ARRLEN          reduce using rule 32 (outputblock -> outputblock STRING .)
    LBRACKET        reduce using rule 32 (outputblock -> outputblock STRING .)
    NOT             reduce using rule 32 (outputblock -> outputblock STRING .)
    ISEMPTY         reduce using rule 32 (outputblock -> outputblock STRING .)


state 57

    (34) outputblock -> outputblock LZDIGIT .

    ENDPRINT        reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    STRING          reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    LZDIGIT         reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    LPAREN          reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    MINUS           reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    INT             reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    FLOAT           reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    LZWORD          reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    NAME            reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    POP             reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    TOP             reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    ARRLEN          reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    LBRACKET        reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    NOT             reduce using rule 34 (outputblock -> outputblock LZDIGIT .)
    ISEMPTY         reduce using rule 34 (outputblock -> outputblock LZDIGIT .)


state 58

    (29) pr_statement -> PRINT outputblock ENDPRINT .

    ENDIF           reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    NAME            reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    IF              reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    WHILE           reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    INPUTDEC        reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    PRINT           reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    PUSH            reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    PRINTARRAY      reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    NEWLINE         reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    ENDELSE         reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    ENDWHILE        reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)
    $end            reduce using rule 29 (pr_statement -> PRINT outputblock ENDPRINT .)


state 59

    (33) outputblock -> outputblock comparison .
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

    ENDPRINT        reduce using rule 33 (outputblock -> outputblock comparison .)
    STRING          reduce using rule 33 (outputblock -> outputblock comparison .)
    LZDIGIT         reduce using rule 33 (outputblock -> outputblock comparison .)
    LPAREN          reduce using rule 33 (outputblock -> outputblock comparison .)
    MINUS           reduce using rule 33 (outputblock -> outputblock comparison .)
    INT             reduce using rule 33 (outputblock -> outputblock comparison .)
    FLOAT           reduce using rule 33 (outputblock -> outputblock comparison .)
    LZWORD          reduce using rule 33 (outputblock -> outputblock comparison .)
    NAME            reduce using rule 33 (outputblock -> outputblock comparison .)
    POP             reduce using rule 33 (outputblock -> outputblock comparison .)
    TOP             reduce using rule 33 (outputblock -> outputblock comparison .)
    ARRLEN          reduce using rule 33 (outputblock -> outputblock comparison .)
    LBRACKET        reduce using rule 33 (outputblock -> outputblock comparison .)
    NOT             reduce using rule 33 (outputblock -> outputblock comparison .)
    ISEMPTY         reduce using rule 33 (outputblock -> outputblock comparison .)
    AND             shift and go to state 65
    OR              shift and go to state 66


state 60

    (31) outputblock -> outputblock expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression
    (44) comparison -> expression . EQUALS expression
    (45) comparison -> expression . NOTEQ expression
    (46) comparison -> expression . GREATER expression
    (47) comparison -> expression . LESS expression
    (48) comparison -> expression . GREATEREQ expression
    (49) comparison -> expression . LESSEQ expression

  ! shift/reduce conflict for MINUS resolved as shift
    ENDPRINT        reduce using rule 31 (outputblock -> outputblock expression .)
    STRING          reduce using rule 31 (outputblock -> outputblock expression .)
    LZDIGIT         reduce using rule 31 (outputblock -> outputblock expression .)
    LPAREN          reduce using rule 31 (outputblock -> outputblock expression .)
    INT             reduce using rule 31 (outputblock -> outputblock expression .)
    FLOAT           reduce using rule 31 (outputblock -> outputblock expression .)
    LZWORD          reduce using rule 31 (outputblock -> outputblock expression .)
    NAME            reduce using rule 31 (outputblock -> outputblock expression .)
    POP             reduce using rule 31 (outputblock -> outputblock expression .)
    TOP             reduce using rule 31 (outputblock -> outputblock expression .)
    ARRLEN          reduce using rule 31 (outputblock -> outputblock expression .)
    LBRACKET        reduce using rule 31 (outputblock -> outputblock expression .)
    NOT             reduce using rule 31 (outputblock -> outputblock expression .)
    ISEMPTY         reduce using rule 31 (outputblock -> outputblock expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72
    EQUALS          shift and go to state 75
    NOTEQ           shift and go to state 74
    GREATER         shift and go to state 81
    LESS            shift and go to state 73
    GREATEREQ       shift and go to state 77
    LESSEQ          shift and go to state 78

  ! MINUS           [ reduce using rule 31 (outputblock -> outputblock expression .) ]


state 61

    (69) expression -> POP NAME .

    PLUS            reduce using rule 69 (expression -> POP NAME .)
    MINUS           reduce using rule 69 (expression -> POP NAME .)
    TIMES           reduce using rule 69 (expression -> POP NAME .)
    FDIVIDE         reduce using rule 69 (expression -> POP NAME .)
    DIVIDE          reduce using rule 69 (expression -> POP NAME .)
    MODULO          reduce using rule 69 (expression -> POP NAME .)
    POWER           reduce using rule 69 (expression -> POP NAME .)
    EQUALS          reduce using rule 69 (expression -> POP NAME .)
    NOTEQ           reduce using rule 69 (expression -> POP NAME .)
    GREATER         reduce using rule 69 (expression -> POP NAME .)
    LESS            reduce using rule 69 (expression -> POP NAME .)
    GREATEREQ       reduce using rule 69 (expression -> POP NAME .)
    LESSEQ          reduce using rule 69 (expression -> POP NAME .)
    ENDPRINT        reduce using rule 69 (expression -> POP NAME .)
    STRING          reduce using rule 69 (expression -> POP NAME .)
    LZDIGIT         reduce using rule 69 (expression -> POP NAME .)
    LPAREN          reduce using rule 69 (expression -> POP NAME .)
    INT             reduce using rule 69 (expression -> POP NAME .)
    FLOAT           reduce using rule 69 (expression -> POP NAME .)
    LZWORD          reduce using rule 69 (expression -> POP NAME .)
    NAME            reduce using rule 69 (expression -> POP NAME .)
    POP             reduce using rule 69 (expression -> POP NAME .)
    TOP             reduce using rule 69 (expression -> POP NAME .)
    ARRLEN          reduce using rule 69 (expression -> POP NAME .)
    LBRACKET        reduce using rule 69 (expression -> POP NAME .)
    NOT             reduce using rule 69 (expression -> POP NAME .)
    ISEMPTY         reduce using rule 69 (expression -> POP NAME .)
    RPAREN          reduce using rule 69 (expression -> POP NAME .)
    ENDPUSH         reduce using rule 69 (expression -> POP NAME .)
    RBRACKET        reduce using rule 69 (expression -> POP NAME .)
    IF              reduce using rule 69 (expression -> POP NAME .)
    WHILE           reduce using rule 69 (expression -> POP NAME .)
    INPUTDEC        reduce using rule 69 (expression -> POP NAME .)
    PRINT           reduce using rule 69 (expression -> POP NAME .)
    PUSH            reduce using rule 69 (expression -> POP NAME .)
    PRINTARRAY      reduce using rule 69 (expression -> POP NAME .)
    NEWLINE         reduce using rule 69 (expression -> POP NAME .)
    $end            reduce using rule 69 (expression -> POP NAME .)
    ENDWHILE        reduce using rule 69 (expression -> POP NAME .)
    ENDIF           reduce using rule 69 (expression -> POP NAME .)
    ENDELSE         reduce using rule 69 (expression -> POP NAME .)
    AND             reduce using rule 69 (expression -> POP NAME .)
    OR              reduce using rule 69 (expression -> POP NAME .)
    COMMA           reduce using rule 69 (expression -> POP NAME .)


state 62

    (71) arr_empty -> ISEMPTY NAME .

    AND             reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    OR              reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    ENDPRINT        reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    STRING          reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    LZDIGIT         reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    LPAREN          reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    MINUS           reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    INT             reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    FLOAT           reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    LZWORD          reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    NAME            reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    POP             reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    TOP             reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    ARRLEN          reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    LBRACKET        reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    NOT             reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    ISEMPTY         reduce using rule 71 (arr_empty -> ISEMPTY NAME .)
    RBRACKET        reduce using rule 71 (arr_empty -> ISEMPTY NAME .)


state 63

    (72) expression -> ARRLEN NAME .

    PLUS            reduce using rule 72 (expression -> ARRLEN NAME .)
    MINUS           reduce using rule 72 (expression -> ARRLEN NAME .)
    TIMES           reduce using rule 72 (expression -> ARRLEN NAME .)
    FDIVIDE         reduce using rule 72 (expression -> ARRLEN NAME .)
    DIVIDE          reduce using rule 72 (expression -> ARRLEN NAME .)
    MODULO          reduce using rule 72 (expression -> ARRLEN NAME .)
    POWER           reduce using rule 72 (expression -> ARRLEN NAME .)
    EQUALS          reduce using rule 72 (expression -> ARRLEN NAME .)
    NOTEQ           reduce using rule 72 (expression -> ARRLEN NAME .)
    GREATER         reduce using rule 72 (expression -> ARRLEN NAME .)
    LESS            reduce using rule 72 (expression -> ARRLEN NAME .)
    GREATEREQ       reduce using rule 72 (expression -> ARRLEN NAME .)
    LESSEQ          reduce using rule 72 (expression -> ARRLEN NAME .)
    ENDPRINT        reduce using rule 72 (expression -> ARRLEN NAME .)
    STRING          reduce using rule 72 (expression -> ARRLEN NAME .)
    LZDIGIT         reduce using rule 72 (expression -> ARRLEN NAME .)
    LPAREN          reduce using rule 72 (expression -> ARRLEN NAME .)
    INT             reduce using rule 72 (expression -> ARRLEN NAME .)
    FLOAT           reduce using rule 72 (expression -> ARRLEN NAME .)
    LZWORD          reduce using rule 72 (expression -> ARRLEN NAME .)
    NAME            reduce using rule 72 (expression -> ARRLEN NAME .)
    POP             reduce using rule 72 (expression -> ARRLEN NAME .)
    TOP             reduce using rule 72 (expression -> ARRLEN NAME .)
    ARRLEN          reduce using rule 72 (expression -> ARRLEN NAME .)
    LBRACKET        reduce using rule 72 (expression -> ARRLEN NAME .)
    NOT             reduce using rule 72 (expression -> ARRLEN NAME .)
    ISEMPTY         reduce using rule 72 (expression -> ARRLEN NAME .)
    RPAREN          reduce using rule 72 (expression -> ARRLEN NAME .)
    ENDPUSH         reduce using rule 72 (expression -> ARRLEN NAME .)
    RBRACKET        reduce using rule 72 (expression -> ARRLEN NAME .)
    IF              reduce using rule 72 (expression -> ARRLEN NAME .)
    WHILE           reduce using rule 72 (expression -> ARRLEN NAME .)
    INPUTDEC        reduce using rule 72 (expression -> ARRLEN NAME .)
    PRINT           reduce using rule 72 (expression -> ARRLEN NAME .)
    PUSH            reduce using rule 72 (expression -> ARRLEN NAME .)
    PRINTARRAY      reduce using rule 72 (expression -> ARRLEN NAME .)
    NEWLINE         reduce using rule 72 (expression -> ARRLEN NAME .)
    $end            reduce using rule 72 (expression -> ARRLEN NAME .)
    ENDWHILE        reduce using rule 72 (expression -> ARRLEN NAME .)
    ENDIF           reduce using rule 72 (expression -> ARRLEN NAME .)
    ENDELSE         reduce using rule 72 (expression -> ARRLEN NAME .)
    AND             reduce using rule 72 (expression -> ARRLEN NAME .)
    OR              reduce using rule 72 (expression -> ARRLEN NAME .)
    COMMA           reduce using rule 72 (expression -> ARRLEN NAME .)


state 64

    (60) expression -> LPAREN expression . RPAREN
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    RPAREN          shift and go to state 92
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 65

    (50) comparison -> comparison AND . comparison
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    comparison                     shift and go to state 93
    expression                     shift and go to state 54
    arr_empty                      shift and go to state 28

state 66

    (51) comparison -> comparison OR . comparison
    (42) comparison -> . arr_empty
    (43) comparison -> . LBRACKET comparison RBRACKET
    (44) comparison -> . expression EQUALS expression
    (45) comparison -> . expression NOTEQ expression
    (46) comparison -> . expression GREATER expression
    (47) comparison -> . expression LESS expression
    (48) comparison -> . expression GREATEREQ expression
    (49) comparison -> . expression LESSEQ expression
    (50) comparison -> . comparison AND comparison
    (51) comparison -> . comparison OR comparison
    (52) comparison -> . NOT comparison
    (71) arr_empty -> . ISEMPTY NAME
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LBRACKET        shift and go to state 29
    NOT             shift and go to state 43
    ISEMPTY         shift and go to state 35
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    comparison                     shift and go to state 94
    expression                     shift and go to state 54
    arr_empty                      shift and go to state 28

state 67

    (66) expression -> NAME LBRACKET . expression RBRACKET
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 95

state 68

    (52) comparison -> NOT comparison .
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 52 (comparison -> NOT comparison .)
    ENDPRINT        reduce using rule 52 (comparison -> NOT comparison .)
    STRING          reduce using rule 52 (comparison -> NOT comparison .)
    LZDIGIT         reduce using rule 52 (comparison -> NOT comparison .)
    LPAREN          reduce using rule 52 (comparison -> NOT comparison .)
    MINUS           reduce using rule 52 (comparison -> NOT comparison .)
    INT             reduce using rule 52 (comparison -> NOT comparison .)
    FLOAT           reduce using rule 52 (comparison -> NOT comparison .)
    LZWORD          reduce using rule 52 (comparison -> NOT comparison .)
    NAME            reduce using rule 52 (comparison -> NOT comparison .)
    POP             reduce using rule 52 (comparison -> NOT comparison .)
    TOP             reduce using rule 52 (comparison -> NOT comparison .)
    ARRLEN          reduce using rule 52 (comparison -> NOT comparison .)
    LBRACKET        reduce using rule 52 (comparison -> NOT comparison .)
    NOT             reduce using rule 52 (comparison -> NOT comparison .)
    ISEMPTY         reduce using rule 52 (comparison -> NOT comparison .)
    AND             shift and go to state 65
    OR              shift and go to state 66

  ! AND             [ reduce using rule 52 (comparison -> NOT comparison .) ]
  ! OR              [ reduce using rule 52 (comparison -> NOT comparison .) ]


state 69

    (56) expression -> expression FDIVIDE . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 96

state 70

    (58) expression -> expression MODULO . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 97

state 71

    (57) expression -> expression DIVIDE . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 98

state 72

    (59) expression -> expression POWER . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 99

state 73

    (47) comparison -> expression LESS . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 100

state 74

    (45) comparison -> expression NOTEQ . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 101

state 75

    (44) comparison -> expression EQUALS . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 102

state 76

    (55) expression -> expression TIMES . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 103

state 77

    (48) comparison -> expression GREATEREQ . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 104

state 78

    (49) comparison -> expression LESSEQ . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 105

state 79

    (53) expression -> expression PLUS . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 106

state 80

    (54) expression -> expression MINUS . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 107

state 81

    (46) comparison -> expression GREATER . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 108

state 82

    (41) wh_statement -> WHILE LBRACKET comparison . RBRACKET statements ENDWHILE
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

    RBRACKET        shift and go to state 109
    AND             shift and go to state 65
    OR              shift and go to state 66


state 83

    (67) arr_push -> PUSH NAME expression . ENDPUSH
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    ENDPUSH         shift and go to state 110
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 84

    (39) if_statement -> IF LBRACKET comparison . RBRACKET statements ENDIF
    (40) ifel_statement -> IF LBRACKET comparison . RBRACKET statements ENDIF ELSE statements ENDELSE
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

    RBRACKET        shift and go to state 111
    AND             shift and go to state 65
    OR              shift and go to state 66


state 85

    (73) statement -> NAME LBRACKET expression . RBRACKET ASSIGN expression
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    RBRACKET        shift and go to state 112
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 86

    (22) arr_dec -> NAME ASSIGN LBRACKET . arr_param RBRACKET
    (23) arr_dec -> NAME ASSIGN LBRACKET . RBRACKET
    (24) arr_param -> . arr_param COMMA arr_thing
    (25) arr_param -> . arr_thing
    (26) arr_thing -> . STRING
    (27) arr_thing -> . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    RBRACKET        shift and go to state 116
    STRING          shift and go to state 113
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    arr_thing                      shift and go to state 115
    expression                     shift and go to state 117
    arr_param                      shift and go to state 114

state 87

    (20) var_dec_in -> NAME ASSIGN INTDEC . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 118

state 88

    (21) var_dec_fl -> NAME ASSIGN FLOATDEC . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 119

state 89

    (19) var_dec_st -> NAME ASSIGN STRINGDEC . STRING

    STRING          shift and go to state 120


state 90

    (14) assign_expr -> NAME ASSIGN expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    ENDELSE         reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    NAME            reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    IF              reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    WHILE           reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    INPUTDEC        reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    PRINT           reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    PUSH            reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    PRINTARRAY      reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    NEWLINE         reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    ENDWHILE        reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    ENDIF           reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    $end            reduce using rule 14 (assign_expr -> NAME ASSIGN expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 91

    (43) comparison -> LBRACKET comparison RBRACKET .

    RBRACKET        reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    AND             reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    OR              reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    ENDPRINT        reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    STRING          reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    LZDIGIT         reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    LPAREN          reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    MINUS           reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    INT             reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    FLOAT           reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    LZWORD          reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    NAME            reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    POP             reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    TOP             reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    ARRLEN          reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    LBRACKET        reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    NOT             reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)
    ISEMPTY         reduce using rule 43 (comparison -> LBRACKET comparison RBRACKET .)


state 92

    (60) expression -> LPAREN expression RPAREN .

    PLUS            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    FDIVIDE         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    POWER           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NOTEQ           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LESS            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    GREATEREQ       reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LESSEQ          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ENDPRINT        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    STRING          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LZDIGIT         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    INT             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    FLOAT           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LZWORD          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NAME            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    POP             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    TOP             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ARRLEN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NOT             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ISEMPTY         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ENDPUSH         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    IF              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    WHILE           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    INPUTDEC        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    PRINT           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    PUSH            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    PRINTARRAY      reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    NEWLINE         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    $end            reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ENDWHILE        reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ENDIF           reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    ENDELSE         reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 60 (expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 60 (expression -> LPAREN expression RPAREN .)


state 93

    (50) comparison -> comparison AND comparison .
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 50 (comparison -> comparison AND comparison .)
    ENDPRINT        reduce using rule 50 (comparison -> comparison AND comparison .)
    STRING          reduce using rule 50 (comparison -> comparison AND comparison .)
    LZDIGIT         reduce using rule 50 (comparison -> comparison AND comparison .)
    LPAREN          reduce using rule 50 (comparison -> comparison AND comparison .)
    MINUS           reduce using rule 50 (comparison -> comparison AND comparison .)
    INT             reduce using rule 50 (comparison -> comparison AND comparison .)
    FLOAT           reduce using rule 50 (comparison -> comparison AND comparison .)
    LZWORD          reduce using rule 50 (comparison -> comparison AND comparison .)
    NAME            reduce using rule 50 (comparison -> comparison AND comparison .)
    POP             reduce using rule 50 (comparison -> comparison AND comparison .)
    TOP             reduce using rule 50 (comparison -> comparison AND comparison .)
    ARRLEN          reduce using rule 50 (comparison -> comparison AND comparison .)
    LBRACKET        reduce using rule 50 (comparison -> comparison AND comparison .)
    NOT             reduce using rule 50 (comparison -> comparison AND comparison .)
    ISEMPTY         reduce using rule 50 (comparison -> comparison AND comparison .)
    AND             shift and go to state 65
    OR              shift and go to state 66

  ! AND             [ reduce using rule 50 (comparison -> comparison AND comparison .) ]
  ! OR              [ reduce using rule 50 (comparison -> comparison AND comparison .) ]


state 94

    (51) comparison -> comparison OR comparison .
    (50) comparison -> comparison . AND comparison
    (51) comparison -> comparison . OR comparison

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    RBRACKET        reduce using rule 51 (comparison -> comparison OR comparison .)
    ENDPRINT        reduce using rule 51 (comparison -> comparison OR comparison .)
    STRING          reduce using rule 51 (comparison -> comparison OR comparison .)
    LZDIGIT         reduce using rule 51 (comparison -> comparison OR comparison .)
    LPAREN          reduce using rule 51 (comparison -> comparison OR comparison .)
    MINUS           reduce using rule 51 (comparison -> comparison OR comparison .)
    INT             reduce using rule 51 (comparison -> comparison OR comparison .)
    FLOAT           reduce using rule 51 (comparison -> comparison OR comparison .)
    LZWORD          reduce using rule 51 (comparison -> comparison OR comparison .)
    NAME            reduce using rule 51 (comparison -> comparison OR comparison .)
    POP             reduce using rule 51 (comparison -> comparison OR comparison .)
    TOP             reduce using rule 51 (comparison -> comparison OR comparison .)
    ARRLEN          reduce using rule 51 (comparison -> comparison OR comparison .)
    LBRACKET        reduce using rule 51 (comparison -> comparison OR comparison .)
    NOT             reduce using rule 51 (comparison -> comparison OR comparison .)
    ISEMPTY         reduce using rule 51 (comparison -> comparison OR comparison .)
    AND             shift and go to state 65
    OR              shift and go to state 66

  ! AND             [ reduce using rule 51 (comparison -> comparison OR comparison .) ]
  ! OR              [ reduce using rule 51 (comparison -> comparison OR comparison .) ]


state 95

    (66) expression -> NAME LBRACKET expression . RBRACKET
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    RBRACKET        shift and go to state 121
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 96

    (56) expression -> expression FDIVIDE expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 56 (expression -> expression FDIVIDE expression .)
    MINUS           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    TIMES           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    FDIVIDE         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    DIVIDE          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    MODULO          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    POWER           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    EQUALS          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    NOTEQ           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    GREATER         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    LESS            reduce using rule 56 (expression -> expression FDIVIDE expression .)
    GREATEREQ       reduce using rule 56 (expression -> expression FDIVIDE expression .)
    LESSEQ          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ENDPRINT        reduce using rule 56 (expression -> expression FDIVIDE expression .)
    STRING          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    LZDIGIT         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    LPAREN          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    INT             reduce using rule 56 (expression -> expression FDIVIDE expression .)
    FLOAT           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    LZWORD          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    NAME            reduce using rule 56 (expression -> expression FDIVIDE expression .)
    POP             reduce using rule 56 (expression -> expression FDIVIDE expression .)
    TOP             reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ARRLEN          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    LBRACKET        reduce using rule 56 (expression -> expression FDIVIDE expression .)
    NOT             reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ISEMPTY         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    RPAREN          reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ENDPUSH         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    RBRACKET        reduce using rule 56 (expression -> expression FDIVIDE expression .)
    IF              reduce using rule 56 (expression -> expression FDIVIDE expression .)
    WHILE           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    INPUTDEC        reduce using rule 56 (expression -> expression FDIVIDE expression .)
    PRINT           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    PUSH            reduce using rule 56 (expression -> expression FDIVIDE expression .)
    PRINTARRAY      reduce using rule 56 (expression -> expression FDIVIDE expression .)
    NEWLINE         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    $end            reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ENDWHILE        reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ENDIF           reduce using rule 56 (expression -> expression FDIVIDE expression .)
    ENDELSE         reduce using rule 56 (expression -> expression FDIVIDE expression .)
    AND             reduce using rule 56 (expression -> expression FDIVIDE expression .)
    OR              reduce using rule 56 (expression -> expression FDIVIDE expression .)
    COMMA           reduce using rule 56 (expression -> expression FDIVIDE expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 76 ]
  ! FDIVIDE         [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 70 ]
  ! POWER           [ shift and go to state 72 ]


state 97

    (58) expression -> expression MODULO expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 58 (expression -> expression MODULO expression .)
    MINUS           reduce using rule 58 (expression -> expression MODULO expression .)
    TIMES           reduce using rule 58 (expression -> expression MODULO expression .)
    FDIVIDE         reduce using rule 58 (expression -> expression MODULO expression .)
    DIVIDE          reduce using rule 58 (expression -> expression MODULO expression .)
    MODULO          reduce using rule 58 (expression -> expression MODULO expression .)
    POWER           reduce using rule 58 (expression -> expression MODULO expression .)
    EQUALS          reduce using rule 58 (expression -> expression MODULO expression .)
    NOTEQ           reduce using rule 58 (expression -> expression MODULO expression .)
    GREATER         reduce using rule 58 (expression -> expression MODULO expression .)
    LESS            reduce using rule 58 (expression -> expression MODULO expression .)
    GREATEREQ       reduce using rule 58 (expression -> expression MODULO expression .)
    LESSEQ          reduce using rule 58 (expression -> expression MODULO expression .)
    ENDPRINT        reduce using rule 58 (expression -> expression MODULO expression .)
    STRING          reduce using rule 58 (expression -> expression MODULO expression .)
    LZDIGIT         reduce using rule 58 (expression -> expression MODULO expression .)
    LPAREN          reduce using rule 58 (expression -> expression MODULO expression .)
    INT             reduce using rule 58 (expression -> expression MODULO expression .)
    FLOAT           reduce using rule 58 (expression -> expression MODULO expression .)
    LZWORD          reduce using rule 58 (expression -> expression MODULO expression .)
    NAME            reduce using rule 58 (expression -> expression MODULO expression .)
    POP             reduce using rule 58 (expression -> expression MODULO expression .)
    TOP             reduce using rule 58 (expression -> expression MODULO expression .)
    ARRLEN          reduce using rule 58 (expression -> expression MODULO expression .)
    LBRACKET        reduce using rule 58 (expression -> expression MODULO expression .)
    NOT             reduce using rule 58 (expression -> expression MODULO expression .)
    ISEMPTY         reduce using rule 58 (expression -> expression MODULO expression .)
    RPAREN          reduce using rule 58 (expression -> expression MODULO expression .)
    ENDPUSH         reduce using rule 58 (expression -> expression MODULO expression .)
    RBRACKET        reduce using rule 58 (expression -> expression MODULO expression .)
    IF              reduce using rule 58 (expression -> expression MODULO expression .)
    WHILE           reduce using rule 58 (expression -> expression MODULO expression .)
    INPUTDEC        reduce using rule 58 (expression -> expression MODULO expression .)
    PRINT           reduce using rule 58 (expression -> expression MODULO expression .)
    PUSH            reduce using rule 58 (expression -> expression MODULO expression .)
    PRINTARRAY      reduce using rule 58 (expression -> expression MODULO expression .)
    NEWLINE         reduce using rule 58 (expression -> expression MODULO expression .)
    $end            reduce using rule 58 (expression -> expression MODULO expression .)
    ENDWHILE        reduce using rule 58 (expression -> expression MODULO expression .)
    ENDIF           reduce using rule 58 (expression -> expression MODULO expression .)
    ENDELSE         reduce using rule 58 (expression -> expression MODULO expression .)
    AND             reduce using rule 58 (expression -> expression MODULO expression .)
    OR              reduce using rule 58 (expression -> expression MODULO expression .)
    COMMA           reduce using rule 58 (expression -> expression MODULO expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 76 ]
  ! FDIVIDE         [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 70 ]
  ! POWER           [ shift and go to state 72 ]


state 98

    (57) expression -> expression DIVIDE expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 57 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 57 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 57 (expression -> expression DIVIDE expression .)
    FDIVIDE         reduce using rule 57 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 57 (expression -> expression DIVIDE expression .)
    MODULO          reduce using rule 57 (expression -> expression DIVIDE expression .)
    POWER           reduce using rule 57 (expression -> expression DIVIDE expression .)
    EQUALS          reduce using rule 57 (expression -> expression DIVIDE expression .)
    NOTEQ           reduce using rule 57 (expression -> expression DIVIDE expression .)
    GREATER         reduce using rule 57 (expression -> expression DIVIDE expression .)
    LESS            reduce using rule 57 (expression -> expression DIVIDE expression .)
    GREATEREQ       reduce using rule 57 (expression -> expression DIVIDE expression .)
    LESSEQ          reduce using rule 57 (expression -> expression DIVIDE expression .)
    ENDPRINT        reduce using rule 57 (expression -> expression DIVIDE expression .)
    STRING          reduce using rule 57 (expression -> expression DIVIDE expression .)
    LZDIGIT         reduce using rule 57 (expression -> expression DIVIDE expression .)
    LPAREN          reduce using rule 57 (expression -> expression DIVIDE expression .)
    INT             reduce using rule 57 (expression -> expression DIVIDE expression .)
    FLOAT           reduce using rule 57 (expression -> expression DIVIDE expression .)
    LZWORD          reduce using rule 57 (expression -> expression DIVIDE expression .)
    NAME            reduce using rule 57 (expression -> expression DIVIDE expression .)
    POP             reduce using rule 57 (expression -> expression DIVIDE expression .)
    TOP             reduce using rule 57 (expression -> expression DIVIDE expression .)
    ARRLEN          reduce using rule 57 (expression -> expression DIVIDE expression .)
    LBRACKET        reduce using rule 57 (expression -> expression DIVIDE expression .)
    NOT             reduce using rule 57 (expression -> expression DIVIDE expression .)
    ISEMPTY         reduce using rule 57 (expression -> expression DIVIDE expression .)
    RPAREN          reduce using rule 57 (expression -> expression DIVIDE expression .)
    ENDPUSH         reduce using rule 57 (expression -> expression DIVIDE expression .)
    RBRACKET        reduce using rule 57 (expression -> expression DIVIDE expression .)
    IF              reduce using rule 57 (expression -> expression DIVIDE expression .)
    WHILE           reduce using rule 57 (expression -> expression DIVIDE expression .)
    INPUTDEC        reduce using rule 57 (expression -> expression DIVIDE expression .)
    PRINT           reduce using rule 57 (expression -> expression DIVIDE expression .)
    PUSH            reduce using rule 57 (expression -> expression DIVIDE expression .)
    PRINTARRAY      reduce using rule 57 (expression -> expression DIVIDE expression .)
    NEWLINE         reduce using rule 57 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 57 (expression -> expression DIVIDE expression .)
    ENDWHILE        reduce using rule 57 (expression -> expression DIVIDE expression .)
    ENDIF           reduce using rule 57 (expression -> expression DIVIDE expression .)
    ENDELSE         reduce using rule 57 (expression -> expression DIVIDE expression .)
    AND             reduce using rule 57 (expression -> expression DIVIDE expression .)
    OR              reduce using rule 57 (expression -> expression DIVIDE expression .)
    COMMA           reduce using rule 57 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 76 ]
  ! FDIVIDE         [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 70 ]
  ! POWER           [ shift and go to state 72 ]


state 99

    (59) expression -> expression POWER expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 59 (expression -> expression POWER expression .)
    MINUS           reduce using rule 59 (expression -> expression POWER expression .)
    TIMES           reduce using rule 59 (expression -> expression POWER expression .)
    FDIVIDE         reduce using rule 59 (expression -> expression POWER expression .)
    DIVIDE          reduce using rule 59 (expression -> expression POWER expression .)
    MODULO          reduce using rule 59 (expression -> expression POWER expression .)
    POWER           reduce using rule 59 (expression -> expression POWER expression .)
    EQUALS          reduce using rule 59 (expression -> expression POWER expression .)
    NOTEQ           reduce using rule 59 (expression -> expression POWER expression .)
    GREATER         reduce using rule 59 (expression -> expression POWER expression .)
    LESS            reduce using rule 59 (expression -> expression POWER expression .)
    GREATEREQ       reduce using rule 59 (expression -> expression POWER expression .)
    LESSEQ          reduce using rule 59 (expression -> expression POWER expression .)
    ENDPRINT        reduce using rule 59 (expression -> expression POWER expression .)
    STRING          reduce using rule 59 (expression -> expression POWER expression .)
    LZDIGIT         reduce using rule 59 (expression -> expression POWER expression .)
    LPAREN          reduce using rule 59 (expression -> expression POWER expression .)
    INT             reduce using rule 59 (expression -> expression POWER expression .)
    FLOAT           reduce using rule 59 (expression -> expression POWER expression .)
    LZWORD          reduce using rule 59 (expression -> expression POWER expression .)
    NAME            reduce using rule 59 (expression -> expression POWER expression .)
    POP             reduce using rule 59 (expression -> expression POWER expression .)
    TOP             reduce using rule 59 (expression -> expression POWER expression .)
    ARRLEN          reduce using rule 59 (expression -> expression POWER expression .)
    LBRACKET        reduce using rule 59 (expression -> expression POWER expression .)
    NOT             reduce using rule 59 (expression -> expression POWER expression .)
    ISEMPTY         reduce using rule 59 (expression -> expression POWER expression .)
    RPAREN          reduce using rule 59 (expression -> expression POWER expression .)
    ENDPUSH         reduce using rule 59 (expression -> expression POWER expression .)
    RBRACKET        reduce using rule 59 (expression -> expression POWER expression .)
    IF              reduce using rule 59 (expression -> expression POWER expression .)
    WHILE           reduce using rule 59 (expression -> expression POWER expression .)
    INPUTDEC        reduce using rule 59 (expression -> expression POWER expression .)
    PRINT           reduce using rule 59 (expression -> expression POWER expression .)
    PUSH            reduce using rule 59 (expression -> expression POWER expression .)
    PRINTARRAY      reduce using rule 59 (expression -> expression POWER expression .)
    NEWLINE         reduce using rule 59 (expression -> expression POWER expression .)
    $end            reduce using rule 59 (expression -> expression POWER expression .)
    ENDWHILE        reduce using rule 59 (expression -> expression POWER expression .)
    ENDIF           reduce using rule 59 (expression -> expression POWER expression .)
    ENDELSE         reduce using rule 59 (expression -> expression POWER expression .)
    AND             reduce using rule 59 (expression -> expression POWER expression .)
    OR              reduce using rule 59 (expression -> expression POWER expression .)
    COMMA           reduce using rule 59 (expression -> expression POWER expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 76 ]
  ! FDIVIDE         [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 70 ]
  ! POWER           [ shift and go to state 72 ]


state 100

    (47) comparison -> expression LESS expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 47 (comparison -> expression LESS expression .)
    AND             reduce using rule 47 (comparison -> expression LESS expression .)
    OR              reduce using rule 47 (comparison -> expression LESS expression .)
    ENDPRINT        reduce using rule 47 (comparison -> expression LESS expression .)
    STRING          reduce using rule 47 (comparison -> expression LESS expression .)
    LZDIGIT         reduce using rule 47 (comparison -> expression LESS expression .)
    LPAREN          reduce using rule 47 (comparison -> expression LESS expression .)
    INT             reduce using rule 47 (comparison -> expression LESS expression .)
    FLOAT           reduce using rule 47 (comparison -> expression LESS expression .)
    LZWORD          reduce using rule 47 (comparison -> expression LESS expression .)
    NAME            reduce using rule 47 (comparison -> expression LESS expression .)
    POP             reduce using rule 47 (comparison -> expression LESS expression .)
    TOP             reduce using rule 47 (comparison -> expression LESS expression .)
    ARRLEN          reduce using rule 47 (comparison -> expression LESS expression .)
    LBRACKET        reduce using rule 47 (comparison -> expression LESS expression .)
    NOT             reduce using rule 47 (comparison -> expression LESS expression .)
    ISEMPTY         reduce using rule 47 (comparison -> expression LESS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! MINUS           [ reduce using rule 47 (comparison -> expression LESS expression .) ]


state 101

    (45) comparison -> expression NOTEQ expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 45 (comparison -> expression NOTEQ expression .)
    AND             reduce using rule 45 (comparison -> expression NOTEQ expression .)
    OR              reduce using rule 45 (comparison -> expression NOTEQ expression .)
    ENDPRINT        reduce using rule 45 (comparison -> expression NOTEQ expression .)
    STRING          reduce using rule 45 (comparison -> expression NOTEQ expression .)
    LZDIGIT         reduce using rule 45 (comparison -> expression NOTEQ expression .)
    LPAREN          reduce using rule 45 (comparison -> expression NOTEQ expression .)
    INT             reduce using rule 45 (comparison -> expression NOTEQ expression .)
    FLOAT           reduce using rule 45 (comparison -> expression NOTEQ expression .)
    LZWORD          reduce using rule 45 (comparison -> expression NOTEQ expression .)
    NAME            reduce using rule 45 (comparison -> expression NOTEQ expression .)
    POP             reduce using rule 45 (comparison -> expression NOTEQ expression .)
    TOP             reduce using rule 45 (comparison -> expression NOTEQ expression .)
    ARRLEN          reduce using rule 45 (comparison -> expression NOTEQ expression .)
    LBRACKET        reduce using rule 45 (comparison -> expression NOTEQ expression .)
    NOT             reduce using rule 45 (comparison -> expression NOTEQ expression .)
    ISEMPTY         reduce using rule 45 (comparison -> expression NOTEQ expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! MINUS           [ reduce using rule 45 (comparison -> expression NOTEQ expression .) ]


state 102

    (44) comparison -> expression EQUALS expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 44 (comparison -> expression EQUALS expression .)
    AND             reduce using rule 44 (comparison -> expression EQUALS expression .)
    OR              reduce using rule 44 (comparison -> expression EQUALS expression .)
    ENDPRINT        reduce using rule 44 (comparison -> expression EQUALS expression .)
    STRING          reduce using rule 44 (comparison -> expression EQUALS expression .)
    LZDIGIT         reduce using rule 44 (comparison -> expression EQUALS expression .)
    LPAREN          reduce using rule 44 (comparison -> expression EQUALS expression .)
    INT             reduce using rule 44 (comparison -> expression EQUALS expression .)
    FLOAT           reduce using rule 44 (comparison -> expression EQUALS expression .)
    LZWORD          reduce using rule 44 (comparison -> expression EQUALS expression .)
    NAME            reduce using rule 44 (comparison -> expression EQUALS expression .)
    POP             reduce using rule 44 (comparison -> expression EQUALS expression .)
    TOP             reduce using rule 44 (comparison -> expression EQUALS expression .)
    ARRLEN          reduce using rule 44 (comparison -> expression EQUALS expression .)
    LBRACKET        reduce using rule 44 (comparison -> expression EQUALS expression .)
    NOT             reduce using rule 44 (comparison -> expression EQUALS expression .)
    ISEMPTY         reduce using rule 44 (comparison -> expression EQUALS expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! MINUS           [ reduce using rule 44 (comparison -> expression EQUALS expression .) ]


state 103

    (55) expression -> expression TIMES expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 55 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 55 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 55 (expression -> expression TIMES expression .)
    FDIVIDE         reduce using rule 55 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 55 (expression -> expression TIMES expression .)
    MODULO          reduce using rule 55 (expression -> expression TIMES expression .)
    POWER           reduce using rule 55 (expression -> expression TIMES expression .)
    EQUALS          reduce using rule 55 (expression -> expression TIMES expression .)
    NOTEQ           reduce using rule 55 (expression -> expression TIMES expression .)
    GREATER         reduce using rule 55 (expression -> expression TIMES expression .)
    LESS            reduce using rule 55 (expression -> expression TIMES expression .)
    GREATEREQ       reduce using rule 55 (expression -> expression TIMES expression .)
    LESSEQ          reduce using rule 55 (expression -> expression TIMES expression .)
    ENDPRINT        reduce using rule 55 (expression -> expression TIMES expression .)
    STRING          reduce using rule 55 (expression -> expression TIMES expression .)
    LZDIGIT         reduce using rule 55 (expression -> expression TIMES expression .)
    LPAREN          reduce using rule 55 (expression -> expression TIMES expression .)
    INT             reduce using rule 55 (expression -> expression TIMES expression .)
    FLOAT           reduce using rule 55 (expression -> expression TIMES expression .)
    LZWORD          reduce using rule 55 (expression -> expression TIMES expression .)
    NAME            reduce using rule 55 (expression -> expression TIMES expression .)
    POP             reduce using rule 55 (expression -> expression TIMES expression .)
    TOP             reduce using rule 55 (expression -> expression TIMES expression .)
    ARRLEN          reduce using rule 55 (expression -> expression TIMES expression .)
    LBRACKET        reduce using rule 55 (expression -> expression TIMES expression .)
    NOT             reduce using rule 55 (expression -> expression TIMES expression .)
    ISEMPTY         reduce using rule 55 (expression -> expression TIMES expression .)
    RPAREN          reduce using rule 55 (expression -> expression TIMES expression .)
    ENDPUSH         reduce using rule 55 (expression -> expression TIMES expression .)
    RBRACKET        reduce using rule 55 (expression -> expression TIMES expression .)
    IF              reduce using rule 55 (expression -> expression TIMES expression .)
    WHILE           reduce using rule 55 (expression -> expression TIMES expression .)
    INPUTDEC        reduce using rule 55 (expression -> expression TIMES expression .)
    PRINT           reduce using rule 55 (expression -> expression TIMES expression .)
    PUSH            reduce using rule 55 (expression -> expression TIMES expression .)
    PRINTARRAY      reduce using rule 55 (expression -> expression TIMES expression .)
    NEWLINE         reduce using rule 55 (expression -> expression TIMES expression .)
    $end            reduce using rule 55 (expression -> expression TIMES expression .)
    ENDWHILE        reduce using rule 55 (expression -> expression TIMES expression .)
    ENDIF           reduce using rule 55 (expression -> expression TIMES expression .)
    ENDELSE         reduce using rule 55 (expression -> expression TIMES expression .)
    AND             reduce using rule 55 (expression -> expression TIMES expression .)
    OR              reduce using rule 55 (expression -> expression TIMES expression .)
    COMMA           reduce using rule 55 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]
  ! TIMES           [ shift and go to state 76 ]
  ! FDIVIDE         [ shift and go to state 69 ]
  ! DIVIDE          [ shift and go to state 71 ]
  ! MODULO          [ shift and go to state 70 ]
  ! POWER           [ shift and go to state 72 ]


state 104

    (48) comparison -> expression GREATEREQ expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    AND             reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    OR              reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    ENDPRINT        reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    STRING          reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    LZDIGIT         reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    LPAREN          reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    INT             reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    FLOAT           reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    LZWORD          reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    NAME            reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    POP             reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    TOP             reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    ARRLEN          reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    LBRACKET        reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    NOT             reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    ISEMPTY         reduce using rule 48 (comparison -> expression GREATEREQ expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! MINUS           [ reduce using rule 48 (comparison -> expression GREATEREQ expression .) ]


state 105

    (49) comparison -> expression LESSEQ expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 49 (comparison -> expression LESSEQ expression .)
    AND             reduce using rule 49 (comparison -> expression LESSEQ expression .)
    OR              reduce using rule 49 (comparison -> expression LESSEQ expression .)
    ENDPRINT        reduce using rule 49 (comparison -> expression LESSEQ expression .)
    STRING          reduce using rule 49 (comparison -> expression LESSEQ expression .)
    LZDIGIT         reduce using rule 49 (comparison -> expression LESSEQ expression .)
    LPAREN          reduce using rule 49 (comparison -> expression LESSEQ expression .)
    INT             reduce using rule 49 (comparison -> expression LESSEQ expression .)
    FLOAT           reduce using rule 49 (comparison -> expression LESSEQ expression .)
    LZWORD          reduce using rule 49 (comparison -> expression LESSEQ expression .)
    NAME            reduce using rule 49 (comparison -> expression LESSEQ expression .)
    POP             reduce using rule 49 (comparison -> expression LESSEQ expression .)
    TOP             reduce using rule 49 (comparison -> expression LESSEQ expression .)
    ARRLEN          reduce using rule 49 (comparison -> expression LESSEQ expression .)
    LBRACKET        reduce using rule 49 (comparison -> expression LESSEQ expression .)
    NOT             reduce using rule 49 (comparison -> expression LESSEQ expression .)
    ISEMPTY         reduce using rule 49 (comparison -> expression LESSEQ expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! MINUS           [ reduce using rule 49 (comparison -> expression LESSEQ expression .) ]


state 106

    (53) expression -> expression PLUS expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 53 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 53 (expression -> expression PLUS expression .)
    EQUALS          reduce using rule 53 (expression -> expression PLUS expression .)
    NOTEQ           reduce using rule 53 (expression -> expression PLUS expression .)
    GREATER         reduce using rule 53 (expression -> expression PLUS expression .)
    LESS            reduce using rule 53 (expression -> expression PLUS expression .)
    GREATEREQ       reduce using rule 53 (expression -> expression PLUS expression .)
    LESSEQ          reduce using rule 53 (expression -> expression PLUS expression .)
    ENDPRINT        reduce using rule 53 (expression -> expression PLUS expression .)
    STRING          reduce using rule 53 (expression -> expression PLUS expression .)
    LZDIGIT         reduce using rule 53 (expression -> expression PLUS expression .)
    LPAREN          reduce using rule 53 (expression -> expression PLUS expression .)
    INT             reduce using rule 53 (expression -> expression PLUS expression .)
    FLOAT           reduce using rule 53 (expression -> expression PLUS expression .)
    LZWORD          reduce using rule 53 (expression -> expression PLUS expression .)
    NAME            reduce using rule 53 (expression -> expression PLUS expression .)
    POP             reduce using rule 53 (expression -> expression PLUS expression .)
    TOP             reduce using rule 53 (expression -> expression PLUS expression .)
    ARRLEN          reduce using rule 53 (expression -> expression PLUS expression .)
    LBRACKET        reduce using rule 53 (expression -> expression PLUS expression .)
    NOT             reduce using rule 53 (expression -> expression PLUS expression .)
    ISEMPTY         reduce using rule 53 (expression -> expression PLUS expression .)
    RPAREN          reduce using rule 53 (expression -> expression PLUS expression .)
    ENDPUSH         reduce using rule 53 (expression -> expression PLUS expression .)
    RBRACKET        reduce using rule 53 (expression -> expression PLUS expression .)
    IF              reduce using rule 53 (expression -> expression PLUS expression .)
    WHILE           reduce using rule 53 (expression -> expression PLUS expression .)
    INPUTDEC        reduce using rule 53 (expression -> expression PLUS expression .)
    PRINT           reduce using rule 53 (expression -> expression PLUS expression .)
    PUSH            reduce using rule 53 (expression -> expression PLUS expression .)
    PRINTARRAY      reduce using rule 53 (expression -> expression PLUS expression .)
    NEWLINE         reduce using rule 53 (expression -> expression PLUS expression .)
    $end            reduce using rule 53 (expression -> expression PLUS expression .)
    ENDWHILE        reduce using rule 53 (expression -> expression PLUS expression .)
    ENDIF           reduce using rule 53 (expression -> expression PLUS expression .)
    ENDELSE         reduce using rule 53 (expression -> expression PLUS expression .)
    AND             reduce using rule 53 (expression -> expression PLUS expression .)
    OR              reduce using rule 53 (expression -> expression PLUS expression .)
    COMMA           reduce using rule 53 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! TIMES           [ reduce using rule 53 (expression -> expression PLUS expression .) ]
  ! FDIVIDE         [ reduce using rule 53 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 53 (expression -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 53 (expression -> expression PLUS expression .) ]
  ! POWER           [ reduce using rule 53 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]


state 107

    (54) expression -> expression MINUS expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    PLUS            reduce using rule 54 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 54 (expression -> expression MINUS expression .)
    EQUALS          reduce using rule 54 (expression -> expression MINUS expression .)
    NOTEQ           reduce using rule 54 (expression -> expression MINUS expression .)
    GREATER         reduce using rule 54 (expression -> expression MINUS expression .)
    LESS            reduce using rule 54 (expression -> expression MINUS expression .)
    GREATEREQ       reduce using rule 54 (expression -> expression MINUS expression .)
    LESSEQ          reduce using rule 54 (expression -> expression MINUS expression .)
    ENDPRINT        reduce using rule 54 (expression -> expression MINUS expression .)
    STRING          reduce using rule 54 (expression -> expression MINUS expression .)
    LZDIGIT         reduce using rule 54 (expression -> expression MINUS expression .)
    LPAREN          reduce using rule 54 (expression -> expression MINUS expression .)
    INT             reduce using rule 54 (expression -> expression MINUS expression .)
    FLOAT           reduce using rule 54 (expression -> expression MINUS expression .)
    LZWORD          reduce using rule 54 (expression -> expression MINUS expression .)
    NAME            reduce using rule 54 (expression -> expression MINUS expression .)
    POP             reduce using rule 54 (expression -> expression MINUS expression .)
    TOP             reduce using rule 54 (expression -> expression MINUS expression .)
    ARRLEN          reduce using rule 54 (expression -> expression MINUS expression .)
    LBRACKET        reduce using rule 54 (expression -> expression MINUS expression .)
    NOT             reduce using rule 54 (expression -> expression MINUS expression .)
    ISEMPTY         reduce using rule 54 (expression -> expression MINUS expression .)
    RPAREN          reduce using rule 54 (expression -> expression MINUS expression .)
    ENDPUSH         reduce using rule 54 (expression -> expression MINUS expression .)
    RBRACKET        reduce using rule 54 (expression -> expression MINUS expression .)
    IF              reduce using rule 54 (expression -> expression MINUS expression .)
    WHILE           reduce using rule 54 (expression -> expression MINUS expression .)
    INPUTDEC        reduce using rule 54 (expression -> expression MINUS expression .)
    PRINT           reduce using rule 54 (expression -> expression MINUS expression .)
    PUSH            reduce using rule 54 (expression -> expression MINUS expression .)
    PRINTARRAY      reduce using rule 54 (expression -> expression MINUS expression .)
    NEWLINE         reduce using rule 54 (expression -> expression MINUS expression .)
    $end            reduce using rule 54 (expression -> expression MINUS expression .)
    ENDWHILE        reduce using rule 54 (expression -> expression MINUS expression .)
    ENDIF           reduce using rule 54 (expression -> expression MINUS expression .)
    ENDELSE         reduce using rule 54 (expression -> expression MINUS expression .)
    AND             reduce using rule 54 (expression -> expression MINUS expression .)
    OR              reduce using rule 54 (expression -> expression MINUS expression .)
    COMMA           reduce using rule 54 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! TIMES           [ reduce using rule 54 (expression -> expression MINUS expression .) ]
  ! FDIVIDE         [ reduce using rule 54 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 54 (expression -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 54 (expression -> expression MINUS expression .) ]
  ! POWER           [ reduce using rule 54 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 79 ]
  ! MINUS           [ shift and go to state 80 ]


state 108

    (46) comparison -> expression GREATER expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

  ! shift/reduce conflict for MINUS resolved as shift
    RBRACKET        reduce using rule 46 (comparison -> expression GREATER expression .)
    AND             reduce using rule 46 (comparison -> expression GREATER expression .)
    OR              reduce using rule 46 (comparison -> expression GREATER expression .)
    ENDPRINT        reduce using rule 46 (comparison -> expression GREATER expression .)
    STRING          reduce using rule 46 (comparison -> expression GREATER expression .)
    LZDIGIT         reduce using rule 46 (comparison -> expression GREATER expression .)
    LPAREN          reduce using rule 46 (comparison -> expression GREATER expression .)
    INT             reduce using rule 46 (comparison -> expression GREATER expression .)
    FLOAT           reduce using rule 46 (comparison -> expression GREATER expression .)
    LZWORD          reduce using rule 46 (comparison -> expression GREATER expression .)
    NAME            reduce using rule 46 (comparison -> expression GREATER expression .)
    POP             reduce using rule 46 (comparison -> expression GREATER expression .)
    TOP             reduce using rule 46 (comparison -> expression GREATER expression .)
    ARRLEN          reduce using rule 46 (comparison -> expression GREATER expression .)
    LBRACKET        reduce using rule 46 (comparison -> expression GREATER expression .)
    NOT             reduce using rule 46 (comparison -> expression GREATER expression .)
    ISEMPTY         reduce using rule 46 (comparison -> expression GREATER expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72

  ! MINUS           [ reduce using rule 46 (comparison -> expression GREATER expression .) ]


state 109

    (41) wh_statement -> WHILE LBRACKET comparison RBRACKET . statements ENDWHILE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    statements                     shift and go to state 122
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 15
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 110

    (67) arr_push -> PUSH NAME expression ENDPUSH .

    ENDWHILE        reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    NAME            reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    IF              reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    WHILE           reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    INPUTDEC        reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    PRINT           reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    PUSH            reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    PRINTARRAY      reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    NEWLINE         reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    ENDIF           reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    ENDELSE         reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)
    $end            reduce using rule 67 (arr_push -> PUSH NAME expression ENDPUSH .)


state 111

    (39) if_statement -> IF LBRACKET comparison RBRACKET . statements ENDIF
    (40) ifel_statement -> IF LBRACKET comparison RBRACKET . statements ENDIF ELSE statements ENDELSE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    statements                     shift and go to state 123
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 15
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 112

    (73) statement -> NAME LBRACKET expression RBRACKET . ASSIGN expression

    ASSIGN          shift and go to state 124


state 113

    (26) arr_thing -> STRING .

    RBRACKET        reduce using rule 26 (arr_thing -> STRING .)
    COMMA           reduce using rule 26 (arr_thing -> STRING .)


state 114

    (22) arr_dec -> NAME ASSIGN LBRACKET arr_param . RBRACKET
    (24) arr_param -> arr_param . COMMA arr_thing

    RBRACKET        shift and go to state 126
    COMMA           shift and go to state 125


state 115

    (25) arr_param -> arr_thing .

    RBRACKET        reduce using rule 25 (arr_param -> arr_thing .)
    COMMA           reduce using rule 25 (arr_param -> arr_thing .)


state 116

    (23) arr_dec -> NAME ASSIGN LBRACKET RBRACKET .

    NAME            reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    IF              reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    WHILE           reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    INPUTDEC        reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    PRINT           reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    PUSH            reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    PRINTARRAY      reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    NEWLINE         reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    $end            reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    ENDELSE         reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    ENDWHILE        reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)
    ENDIF           reduce using rule 23 (arr_dec -> NAME ASSIGN LBRACKET RBRACKET .)


state 117

    (27) arr_thing -> expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    RBRACKET        reduce using rule 27 (arr_thing -> expression .)
    COMMA           reduce using rule 27 (arr_thing -> expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 118

    (20) var_dec_in -> NAME ASSIGN INTDEC expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    ENDIF           reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    NAME            reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    IF              reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    WHILE           reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    INPUTDEC        reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    PRINT           reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    PUSH            reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    PRINTARRAY      reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    NEWLINE         reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    ENDWHILE        reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    ENDELSE         reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    $end            reduce using rule 20 (var_dec_in -> NAME ASSIGN INTDEC expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 119

    (21) var_dec_fl -> NAME ASSIGN FLOATDEC expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    ENDELSE         reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    NAME            reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    IF              reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    WHILE           reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    INPUTDEC        reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    PRINT           reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    PUSH            reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    PRINTARRAY      reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    NEWLINE         reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    ENDWHILE        reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    $end            reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    ENDIF           reduce using rule 21 (var_dec_fl -> NAME ASSIGN FLOATDEC expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 120

    (19) var_dec_st -> NAME ASSIGN STRINGDEC STRING .

    NAME            reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    IF              reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    WHILE           reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    INPUTDEC        reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    PRINT           reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    PUSH            reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    PRINTARRAY      reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    NEWLINE         reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    $end            reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    ENDELSE         reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    ENDWHILE        reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)
    ENDIF           reduce using rule 19 (var_dec_st -> NAME ASSIGN STRINGDEC STRING .)


state 121

    (66) expression -> NAME LBRACKET expression RBRACKET .

    PLUS            reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    FDIVIDE         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    POWER           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    NOTEQ           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    LESS            reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    GREATEREQ       reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    LESSEQ          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ENDPRINT        reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    STRING          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    LZDIGIT         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    INT             reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    FLOAT           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    LZWORD          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    NAME            reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    POP             reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    TOP             reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ARRLEN          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    NOT             reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ISEMPTY         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ENDPUSH         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    IF              reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    WHILE           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    INPUTDEC        reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    PRINT           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    PUSH            reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    PRINTARRAY      reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    NEWLINE         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    $end            reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ENDWHILE        reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ENDIF           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    ENDELSE         reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    AND             reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    OR              reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 66 (expression -> NAME LBRACKET expression RBRACKET .)


state 122

    (41) wh_statement -> WHILE LBRACKET comparison RBRACKET statements . ENDWHILE
    (2) statements -> statements . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    ENDWHILE        shift and go to state 127
    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 26
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 123

    (39) if_statement -> IF LBRACKET comparison RBRACKET statements . ENDIF
    (40) ifel_statement -> IF LBRACKET comparison RBRACKET statements . ENDIF ELSE statements ENDELSE
    (2) statements -> statements . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    ENDIF           shift and go to state 128
    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 26
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 124

    (73) statement -> NAME LBRACKET expression RBRACKET ASSIGN . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    expression                     shift and go to state 129

state 125

    (24) arr_param -> arr_param COMMA . arr_thing
    (26) arr_thing -> . STRING
    (27) arr_thing -> . expression
    (53) expression -> . expression PLUS expression
    (54) expression -> . expression MINUS expression
    (55) expression -> . expression TIMES expression
    (56) expression -> . expression FDIVIDE expression
    (57) expression -> . expression DIVIDE expression
    (58) expression -> . expression MODULO expression
    (59) expression -> . expression POWER expression
    (60) expression -> . LPAREN expression RPAREN
    (61) expression -> . MINUS expression
    (62) expression -> . INT
    (63) expression -> . FLOAT
    (64) expression -> . LZWORD
    (65) expression -> . NAME
    (66) expression -> . NAME LBRACKET expression RBRACKET
    (69) expression -> . POP NAME
    (70) expression -> . TOP NAME
    (72) expression -> . ARRLEN NAME

    STRING          shift and go to state 113
    LPAREN          shift and go to state 37
    MINUS           shift and go to state 30
    INT             shift and go to state 41
    FLOAT           shift and go to state 42
    LZWORD          shift and go to state 38
    NAME            shift and go to state 40
    POP             shift and go to state 34
    TOP             shift and go to state 27
    ARRLEN          shift and go to state 36

    arr_thing                      shift and go to state 130
    expression                     shift and go to state 117

state 126

    (22) arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .

    NAME            reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    IF              reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    WHILE           reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    INPUTDEC        reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    PRINT           reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    PUSH            reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    PRINTARRAY      reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    NEWLINE         reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    $end            reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    ENDELSE         reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    ENDWHILE        reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)
    ENDIF           reduce using rule 22 (arr_dec -> NAME ASSIGN LBRACKET arr_param RBRACKET .)


state 127

    (41) wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .

    ENDELSE         reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    NAME            reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    IF              reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    WHILE           reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    INPUTDEC        reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    PRINT           reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    PUSH            reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    PRINTARRAY      reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    NEWLINE         reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    $end            reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    ENDWHILE        reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)
    ENDIF           reduce using rule 41 (wh_statement -> WHILE LBRACKET comparison RBRACKET statements ENDWHILE .)


state 128

    (39) if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .
    (40) ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF . ELSE statements ENDELSE

    ENDIF           reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    NAME            reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    IF              reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    WHILE           reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    INPUTDEC        reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    PRINT           reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    PUSH            reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    PRINTARRAY      reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    NEWLINE         reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    $end            reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    ENDELSE         reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    ENDWHILE        reduce using rule 39 (if_statement -> IF LBRACKET comparison RBRACKET statements ENDIF .)
    ELSE            shift and go to state 131


state 129

    (73) statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .
    (53) expression -> expression . PLUS expression
    (54) expression -> expression . MINUS expression
    (55) expression -> expression . TIMES expression
    (56) expression -> expression . FDIVIDE expression
    (57) expression -> expression . DIVIDE expression
    (58) expression -> expression . MODULO expression
    (59) expression -> expression . POWER expression

    ENDIF           reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    NAME            reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    IF              reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    WHILE           reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    INPUTDEC        reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    PRINT           reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    PUSH            reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    PRINTARRAY      reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    NEWLINE         reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    $end            reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    ENDELSE         reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    ENDWHILE        reduce using rule 73 (statement -> NAME LBRACKET expression RBRACKET ASSIGN expression .)
    PLUS            shift and go to state 79
    MINUS           shift and go to state 80
    TIMES           shift and go to state 76
    FDIVIDE         shift and go to state 69
    DIVIDE          shift and go to state 71
    MODULO          shift and go to state 70
    POWER           shift and go to state 72


state 130

    (24) arr_param -> arr_param COMMA arr_thing .

    RBRACKET        reduce using rule 24 (arr_param -> arr_param COMMA arr_thing .)
    COMMA           reduce using rule 24 (arr_param -> arr_param COMMA arr_thing .)


state 131

    (40) ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE . statements ENDELSE
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    statements                     shift and go to state 132
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 15
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 132

    (40) ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements . ENDELSE
    (2) statements -> statements . statement
    (4) statement -> . var_dec
    (5) statement -> . if_statement
    (6) statement -> . ifel_statement
    (7) statement -> . wh_statement
    (8) statement -> . ip_statement
    (9) statement -> . pr_statement
    (10) statement -> . assign_expr
    (11) statement -> . arr_push
    (12) statement -> . arr_print
    (13) statement -> . new_line
    (73) statement -> . NAME LBRACKET expression RBRACKET ASSIGN expression
    (15) var_dec -> . var_dec_st
    (16) var_dec -> . var_dec_in
    (17) var_dec -> . var_dec_fl
    (18) var_dec -> . arr_dec
    (39) if_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF
    (40) ifel_statement -> . IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE
    (41) wh_statement -> . WHILE LBRACKET comparison RBRACKET statements ENDWHILE
    (28) ip_statement -> . INPUTDEC NAME
    (29) pr_statement -> . PRINT outputblock ENDPRINT
    (14) assign_expr -> . NAME ASSIGN expression
    (67) arr_push -> . PUSH NAME expression ENDPUSH
    (68) arr_print -> . PRINTARRAY NAME
    (30) new_line -> . NEWLINE
    (19) var_dec_st -> . NAME ASSIGN STRINGDEC STRING
    (20) var_dec_in -> . NAME ASSIGN INTDEC expression
    (21) var_dec_fl -> . NAME ASSIGN FLOATDEC expression
    (22) arr_dec -> . NAME ASSIGN LBRACKET arr_param RBRACKET
    (23) arr_dec -> . NAME ASSIGN LBRACKET RBRACKET

    ENDELSE         shift and go to state 133
    NAME            shift and go to state 22
    IF              shift and go to state 21
    WHILE           shift and go to state 5
    INPUTDEC        shift and go to state 6
    PRINT           shift and go to state 4
    PUSH            shift and go to state 16
    PRINTARRAY      shift and go to state 24
    NEWLINE         shift and go to state 11

    new_line                       shift and go to state 20
    var_dec_in                     shift and go to state 23
    ifel_statement                 shift and go to state 18
    arr_push                       shift and go to state 2
    var_dec                        shift and go to state 10
    wh_statement                   shift and go to state 3
    pr_statement                   shift and go to state 19
    var_dec_fl                     shift and go to state 12
    arr_dec                        shift and go to state 25
    assign_expr                    shift and go to state 14
    statement                      shift and go to state 26
    arr_print                      shift and go to state 7
    var_dec_st                     shift and go to state 8
    if_statement                   shift and go to state 17
    ip_statement                   shift and go to state 9

state 133

    (40) ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .

    ENDELSE         reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    NAME            reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    IF              reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    WHILE           reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    INPUTDEC        reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    PRINT           reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    PUSH            reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    PRINTARRAY      reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    NEWLINE         reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    $end            reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    ENDIF           reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)
    ENDWHILE        reduce using rule 40 (ifel_statement -> IF LBRACKET comparison RBRACKET statements ENDIF ELSE statements ENDELSE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LBRACKET in state 40 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 44 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 68 resolved as shift
WARNING: shift/reduce conflict for OR in state 68 resolved as shift
WARNING: shift/reduce conflict for AND in state 93 resolved as shift
WARNING: shift/reduce conflict for OR in state 93 resolved as shift
WARNING: shift/reduce conflict for AND in state 94 resolved as shift
WARNING: shift/reduce conflict for OR in state 94 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 100 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 101 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 102 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 104 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 105 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 108 resolved as shift
